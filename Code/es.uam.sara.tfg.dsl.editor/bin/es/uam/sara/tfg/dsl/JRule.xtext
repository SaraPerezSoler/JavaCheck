// automatically generated by Xtext
grammar es.uam.sara.tfg.dsl.JRule with org.eclipse.xtext.common.Terminals

import "platform:/resource/es.uam.sara.tfg.dsl/model/dsl.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RuleSet returns RuleSet:
	('Project Name:' ProjectName=EString)?
		rules+=Rule ( rules+=Rule)* ;

Rule returns Rule:
	 action=Action on=Testing ';' ;

enum Action returns Action:
	check = 'check' | correct = 'correct';

Testing returns Testing:
	(no?='no')? quantifier=Quantifier element=Element 'satisfy' satisfy=Or;

enum Quantifier returns Quantifier:
		one = 'ones' | exists = 'exists' | all = 'all';
		
Element returns Element:
	 element=ElementJava
		('which' filter=Or)?;
enum ElementJava returns ElementJava:
	Package = 'package' | Class = 'class' | Interface = 'interface' | Enum = 'enum' | Method = 'method' | Attribute = 'attribute';

Or returns Or:
	(op+=And)|('('op+=And')'('or' '('op+=And')')+);

And returns And:
	op+=Satisfy ('and' op+=Satisfy)*;	

Satisfy returns Satisfy:
	IsInheritor | Implements | IsExtended | HaveConstant | Variable | Parametre | Constructor | Return | AttributeType | Initialize | NoEmpty | Name | JavaDoc | Conteins | Modifiers;


IsInheritor returns IsInheritor:
	{IsInheritor}
	'is inheritor' ('max level=' maxLevel=EBigInteger)?;

Implements returns Implements:
	{Implements}
	'implements interface'
		('max interface=' maxInterface=EBigInteger)?;

IsExtended returns IsExtended:
	isExtends?='is extends';

HaveConstant returns HaveConstant:
	{HaveConstant}
	'use constant'
	;

Variable returns Variable:
	'variables' 
	((position?='right position' ('and ' initialize?='initialized')?)|
	(initialize?='initialized' ('and ' position?='right position')?));

Parametre returns Parametre:
	{Parametre}
     "number of parameters =" numParam=EBigInteger ("and types=" typesParam+=EString ("," typesParam+=EString)*)?;

Constructor returns Constructor:
	{Constructor}
	'is constructor'
	;

Return returns Return:
	'return type=' returnType=EString;

AttributeType returns AttributeType:
	'attribute type=' Type=EString;

Initialize returns Initialize:
	{Initialize}
	'is initialized'
	;

NoEmpty returns NoEmpty:
	{NoEmpty}
	'no empty'
	;

Name returns Name:
	('type name =' type=NameType('and name ' operator=NameOperator name=EString ("in" Language=Language)?)?)|
	('name ' operator=NameOperator  name=EString ("in" Language=Language)? ('and type name =' type=NameType)?);
	
enum NameType returns NameType:
	upperCase = 'upperCase' | lowerCase = 'lowerCase' | upperCamelCase = 'upperCamelCase' | lowerCamelCase = 'lowerCamelCase' | startUpperCase = 'startUpperCase';

enum NameOperator returns NameOperator:
	like = 'like' | equal = 'equal';
	
enum Language returns Language:
	ENGLISH = 'English' | ESPANIOL = 'Spanish';

JavaDoc returns JavaDoc:
	{JavaDoc}
	'JavaDoc'
	(author?='@author')?
	(parametre?='@parameter')?
	(return?='@return')?
	(version?='@version')?
	(throws?='@throws')?
	(see?='@see')?
	;

Conteins returns Conteins:
	'have'
	'{'
		which=Testing
	'}';

Modifiers returns Modifiers:
	'modifiers: '
	 '(' blend+=BlendModifiers')'( "or"  '('blend+=BlendModifiers')')* ;

BlendModifiers returns BlendModifiers:
	(access=AccessModifier (static?='and static')? (final?='and final')? (abstract?='and abstract')? (synchronized?='and synchronized')?) | 
	(static?='static' (final?='and final')? (abstract?='and abstract')? (synchronized?='and synchronized')?)|
	(final?='final' (abstract?='and abstract')? (synchronized?='and synchronized')?)|
	(abstract?='abstract' (synchronized?='and synchronized')?)| synchronized?='synchronized';

enum AccessModifier returns AccessModifier:
	Public = 'Public' | Protected = 'Protected' | Private = 'Private';

EBigInteger returns ecore::EBigInteger:
	'-'? INT;
				
EString returns ecore::EString:
	STRING | ID;


EBoolean returns ecore::EBoolean:
	'true' | 'false';