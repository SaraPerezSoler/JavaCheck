/*
 * generated by Xtext 2.9.2
 */
grammar InternalJRule;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package es.uam.sara.tfg.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.uam.sara.tfg.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.uam.sara.tfg.dsl.services.JRuleGrammarAccess;

}

@parser::members {

 	private JRuleGrammarAccess grammarAccess;

    public InternalJRuleParser(TokenStream input, JRuleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RuleSet";
   	}

   	@Override
   	protected JRuleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Project Name:'
			{
				newLeafNode(otherlv_0, grammarAccess.getRuleSetAccess().getProjectNameKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleSetAccess().getProjectNameEStringParserRuleCall_0_1_0());
					}
					lv_ProjectName_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleSetRule());
						}
						set(
							$current,
							"ProjectName",
							lv_ProjectName_1_0,
							"es.uam.sara.tfg.dsl.JRule.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_1_0());
				}
				lv_rules_2_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					add(
						$current,
						"rules",
						lv_rules_2_0,
						"es.uam.sara.tfg.dsl.JRule.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_2_0());
				}
				lv_rules_3_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					add(
						$current,
						"rules",
						lv_rules_3_0,
						"es.uam.sara.tfg.dsl.JRule.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getActionActionEnumRuleCall_0_0());
				}
				lv_action_0_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"action",
						lv_action_0_0,
						"es.uam.sara.tfg.dsl.JRule.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getOnTestingParserRuleCall_1_0());
				}
				lv_on_1_0=ruleTesting
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"on",
						lv_on_1_0,
						"es.uam.sara.tfg.dsl.JRule.Testing");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleTesting
entryRuleTesting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingRule()); }
	iv_ruleTesting=ruleTesting
	{ $current=$iv_ruleTesting.current; }
	EOF;

// Rule Testing
ruleTesting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_no_0_0='no'
				{
					newLeafNode(lv_no_0_0, grammarAccess.getTestingAccess().getNoNoKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestingRule());
					}
					setWithLastConsumed($current, "no", true, "no");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getQuantifierQuantifierEnumRuleCall_1_0());
				}
				lv_quantifier_1_0=ruleQuantifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					set(
						$current,
						"quantifier",
						lv_quantifier_1_0,
						"es.uam.sara.tfg.dsl.JRule.Quantifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getElementElementParserRuleCall_2_0());
				}
				lv_element_2_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					set(
						$current,
						"element",
						lv_element_2_0,
						"es.uam.sara.tfg.dsl.JRule.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='satisfy'
		{
			newLeafNode(otherlv_3, grammarAccess.getTestingAccess().getSatisfyKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getSatisfyOrParserRuleCall_4_0());
				}
				lv_satisfy_4_0=ruleOr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					set(
						$current,
						"satisfy",
						lv_satisfy_4_0,
						"es.uam.sara.tfg.dsl.JRule.Or");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getElementElementJavaEnumRuleCall_0_0());
				}
				lv_element_0_0=ruleElementJava
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"element",
						lv_element_0_0,
						"es.uam.sara.tfg.dsl.JRule.ElementJava");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='which'
			{
				newLeafNode(otherlv_1, grammarAccess.getElementAccess().getWhichKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getFilterOrParserRuleCall_1_1_0());
					}
					lv_filter_2_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						set(
							$current,
							"filter",
							lv_filter_2_0,
							"es.uam.sara.tfg.dsl.JRule.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrAccess().getOpAndParserRuleCall_0_0());
				}
				lv_op_0_0=ruleAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrRule());
					}
					add(
						$current,
						"op",
						lv_op_0_0,
						"es.uam.sara.tfg.dsl.JRule.And");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getOrAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getOpAndParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						add(
							$current,
							"op",
							lv_op_2_0,
							"es.uam.sara.tfg.dsl.JRule.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getOrAccess().getRightParenthesisKeyword_1_2());
			}
			(
				otherlv_4='or'
				{
					newLeafNode(otherlv_4, grammarAccess.getOrAccess().getOrKeyword_1_3_0());
				}
				otherlv_5='('
				{
					newLeafNode(otherlv_5, grammarAccess.getOrAccess().getLeftParenthesisKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOrAccess().getOpAndParserRuleCall_1_3_2_0());
						}
						lv_op_6_0=ruleAnd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOrRule());
							}
							add(
								$current,
								"op",
								lv_op_6_0,
								"es.uam.sara.tfg.dsl.JRule.And");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getOrAccess().getRightParenthesisKeyword_1_3_3());
				}
			)+
		)
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getOpSatisfyParserRuleCall_0_0());
				}
				lv_op_0_0=ruleSatisfy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					add(
						$current,
						"op",
						lv_op_0_0,
						"es.uam.sara.tfg.dsl.JRule.Satisfy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getOpSatisfyParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleSatisfy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						add(
							$current,
							"op",
							lv_op_2_0,
							"es.uam.sara.tfg.dsl.JRule.Satisfy");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSatisfy
entryRuleSatisfy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSatisfyRule()); }
	iv_ruleSatisfy=ruleSatisfy
	{ $current=$iv_ruleSatisfy.current; }
	EOF;

// Rule Satisfy
ruleSatisfy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getIsInheritorParserRuleCall_0());
		}
		this_IsInheritor_0=ruleIsInheritor
		{
			$current = $this_IsInheritor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getImplementsParserRuleCall_1());
		}
		this_Implements_1=ruleImplements
		{
			$current = $this_Implements_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getIsExtendedParserRuleCall_2());
		}
		this_IsExtended_2=ruleIsExtended
		{
			$current = $this_IsExtended_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getHaveConstantParserRuleCall_3());
		}
		this_HaveConstant_3=ruleHaveConstant
		{
			$current = $this_HaveConstant_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getVariableParserRuleCall_4());
		}
		this_Variable_4=ruleVariable
		{
			$current = $this_Variable_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getParametreParserRuleCall_5());
		}
		this_Parametre_5=ruleParametre
		{
			$current = $this_Parametre_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getConstructorParserRuleCall_6());
		}
		this_Constructor_6=ruleConstructor
		{
			$current = $this_Constructor_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getReturnParserRuleCall_7());
		}
		this_Return_7=ruleReturn
		{
			$current = $this_Return_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getAttributeTypeParserRuleCall_8());
		}
		this_AttributeType_8=ruleAttributeType
		{
			$current = $this_AttributeType_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getInitializeParserRuleCall_9());
		}
		this_Initialize_9=ruleInitialize
		{
			$current = $this_Initialize_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getNoEmptyParserRuleCall_10());
		}
		this_NoEmpty_10=ruleNoEmpty
		{
			$current = $this_NoEmpty_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getNameParserRuleCall_11());
		}
		this_Name_11=ruleName
		{
			$current = $this_Name_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getJavaDocParserRuleCall_12());
		}
		this_JavaDoc_12=ruleJavaDoc
		{
			$current = $this_JavaDoc_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getConteinsParserRuleCall_13());
		}
		this_Conteins_13=ruleConteins
		{
			$current = $this_Conteins_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getModifiersParserRuleCall_14());
		}
		this_Modifiers_14=ruleModifiers
		{
			$current = $this_Modifiers_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIsInheritor
entryRuleIsInheritor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsInheritorRule()); }
	iv_ruleIsInheritor=ruleIsInheritor
	{ $current=$iv_ruleIsInheritor.current; }
	EOF;

// Rule IsInheritor
ruleIsInheritor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsInheritorAccess().getIsInheritorAction_0(),
					$current);
			}
		)
		otherlv_1='is inheritor'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsInheritorAccess().getIsInheritorKeyword_1());
		}
		(
			otherlv_2='max level='
			{
				newLeafNode(otherlv_2, grammarAccess.getIsInheritorAccess().getMaxLevelKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIsInheritorAccess().getMaxLevelEBigIntegerParserRuleCall_2_1_0());
					}
					lv_maxLevel_3_0=ruleEBigInteger
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIsInheritorRule());
						}
						set(
							$current,
							"maxLevel",
							lv_maxLevel_3_0,
							"es.uam.sara.tfg.dsl.JRule.EBigInteger");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleImplements
entryRuleImplements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplementsRule()); }
	iv_ruleImplements=ruleImplements
	{ $current=$iv_ruleImplements.current; }
	EOF;

// Rule Implements
ruleImplements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getImplementsAccess().getImplementsAction_0(),
					$current);
			}
		)
		otherlv_1='implements interface'
		{
			newLeafNode(otherlv_1, grammarAccess.getImplementsAccess().getImplementsInterfaceKeyword_1());
		}
		(
			otherlv_2='max interface='
			{
				newLeafNode(otherlv_2, grammarAccess.getImplementsAccess().getMaxInterfaceKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImplementsAccess().getMaxInterfaceEBigIntegerParserRuleCall_2_1_0());
					}
					lv_maxInterface_3_0=ruleEBigInteger
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImplementsRule());
						}
						set(
							$current,
							"maxInterface",
							lv_maxInterface_3_0,
							"es.uam.sara.tfg.dsl.JRule.EBigInteger");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIsExtended
entryRuleIsExtended returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsExtendedRule()); }
	iv_ruleIsExtended=ruleIsExtended
	{ $current=$iv_ruleIsExtended.current; }
	EOF;

// Rule IsExtended
ruleIsExtended returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_isExtends_0_0='is extends'
			{
				newLeafNode(lv_isExtends_0_0, grammarAccess.getIsExtendedAccess().getIsExtendsIsExtendsKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIsExtendedRule());
				}
				setWithLastConsumed($current, "isExtends", true, "is extends");
			}
		)
	)
;

// Entry rule entryRuleHaveConstant
entryRuleHaveConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHaveConstantRule()); }
	iv_ruleHaveConstant=ruleHaveConstant
	{ $current=$iv_ruleHaveConstant.current; }
	EOF;

// Rule HaveConstant
ruleHaveConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHaveConstantAccess().getHaveConstantAction_0(),
					$current);
			}
		)
		otherlv_1='use constant'
		{
			newLeafNode(otherlv_1, grammarAccess.getHaveConstantAccess().getUseConstantKeyword_1());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variables'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVariablesKeyword_0());
		}
		(
			(
				(
					(
						lv_position_1_0='right position'
						{
							newLeafNode(lv_position_1_0, grammarAccess.getVariableAccess().getPositionRightPositionKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableRule());
							}
							setWithLastConsumed($current, "position", true, "right position");
						}
					)
				)
				(
					otherlv_2='and '
					{
						newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getAndKeyword_1_0_1_0());
					}
					(
						(
							lv_initialize_3_0='initialized'
							{
								newLeafNode(lv_initialize_3_0, grammarAccess.getVariableAccess().getInitializeInitializedKeyword_1_0_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "initialize", true, "initialized");
							}
						)
					)
				)?
			)
			    |
			(
				(
					(
						lv_initialize_4_0='initialized'
						{
							newLeafNode(lv_initialize_4_0, grammarAccess.getVariableAccess().getInitializeInitializedKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableRule());
							}
							setWithLastConsumed($current, "initialize", true, "initialized");
						}
					)
				)
				(
					otherlv_5='and '
					{
						newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getAndKeyword_1_1_1_0());
					}
					(
						(
							lv_position_6_0='right position'
							{
								newLeafNode(lv_position_6_0, grammarAccess.getVariableAccess().getPositionRightPositionKeyword_1_1_1_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVariableRule());
								}
								setWithLastConsumed($current, "position", true, "right position");
							}
						)
					)
				)?
			)
		)
	)
;

// Entry rule entryRuleParametre
entryRuleParametre returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametreRule()); }
	iv_ruleParametre=ruleParametre
	{ $current=$iv_ruleParametre.current; }
	EOF;

// Rule Parametre
ruleParametre returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParametreAccess().getParametreAction_0(),
					$current);
			}
		)
		otherlv_1='number of parameters ='
		{
			newLeafNode(otherlv_1, grammarAccess.getParametreAccess().getNumberOfParametersKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametreAccess().getNumParamEBigIntegerParserRuleCall_2_0());
				}
				lv_numParam_2_0=ruleEBigInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametreRule());
					}
					set(
						$current,
						"numParam",
						lv_numParam_2_0,
						"es.uam.sara.tfg.dsl.JRule.EBigInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='and types='
			{
				newLeafNode(otherlv_3, grammarAccess.getParametreAccess().getAndTypesKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParametreAccess().getTypesParamEStringParserRuleCall_3_1_0());
					}
					lv_typesParam_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametreRule());
						}
						add(
							$current,
							"typesParam",
							lv_typesParam_4_0,
							"es.uam.sara.tfg.dsl.JRule.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getParametreAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParametreAccess().getTypesParamEStringParserRuleCall_3_2_1_0());
						}
						lv_typesParam_6_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParametreRule());
							}
							add(
								$current,
								"typesParam",
								lv_typesParam_6_0,
								"es.uam.sara.tfg.dsl.JRule.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	iv_ruleConstructor=ruleConstructor
	{ $current=$iv_ruleConstructor.current; }
	EOF;

// Rule Constructor
ruleConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstructorAccess().getConstructorAction_0(),
					$current);
			}
		)
		otherlv_1='is constructor'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstructorAccess().getIsConstructorKeyword_1());
		}
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return type='
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getReturnTypeEStringParserRuleCall_1_0());
				}
				lv_returnType_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_1_0,
						"es.uam.sara.tfg.dsl.JRule.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeType
entryRuleAttributeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeTypeRule()); }
	iv_ruleAttributeType=ruleAttributeType
	{ $current=$iv_ruleAttributeType.current; }
	EOF;

// Rule AttributeType
ruleAttributeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute type='
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeTypeAccess().getAttributeTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeTypeAccess().getTypeEStringParserRuleCall_1_0());
				}
				lv_Type_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeTypeRule());
					}
					set(
						$current,
						"Type",
						lv_Type_1_0,
						"es.uam.sara.tfg.dsl.JRule.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitialize
entryRuleInitialize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializeRule()); }
	iv_ruleInitialize=ruleInitialize
	{ $current=$iv_ruleInitialize.current; }
	EOF;

// Rule Initialize
ruleInitialize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInitializeAccess().getInitializeAction_0(),
					$current);
			}
		)
		otherlv_1='is initialized'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitializeAccess().getIsInitializedKeyword_1());
		}
	)
;

// Entry rule entryRuleNoEmpty
entryRuleNoEmpty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoEmptyRule()); }
	iv_ruleNoEmpty=ruleNoEmpty
	{ $current=$iv_ruleNoEmpty.current; }
	EOF;

// Rule NoEmpty
ruleNoEmpty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNoEmptyAccess().getNoEmptyAction_0(),
					$current);
			}
		)
		otherlv_1='no empty'
		{
			newLeafNode(otherlv_1, grammarAccess.getNoEmptyAccess().getNoEmptyKeyword_1());
		}
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='type name ='
			{
				newLeafNode(otherlv_0, grammarAccess.getNameAccess().getTypeNameKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNameAccess().getTypeNameTypeEnumRuleCall_0_1_0());
					}
					lv_type_1_0=ruleNameType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNameRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"es.uam.sara.tfg.dsl.JRule.NameType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='and name '
				{
					newLeafNode(otherlv_2, grammarAccess.getNameAccess().getAndNameKeyword_0_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNameAccess().getOperatorNameOperatorEnumRuleCall_0_2_1_0());
						}
						lv_operator_3_0=ruleNameOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNameRule());
							}
							set(
								$current,
								"operator",
								lv_operator_3_0,
								"es.uam.sara.tfg.dsl.JRule.NameOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNameAccess().getNameEStringParserRuleCall_0_2_2_0());
						}
						lv_name_4_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNameRule());
							}
							set(
								$current,
								"name",
								lv_name_4_0,
								"es.uam.sara.tfg.dsl.JRule.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5='in'
					{
						newLeafNode(otherlv_5, grammarAccess.getNameAccess().getInKeyword_0_2_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNameAccess().getLanguageLanguageEnumRuleCall_0_2_3_1_0());
							}
							lv_Language_6_0=ruleLanguage
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNameRule());
								}
								set(
									$current,
									"Language",
									lv_Language_6_0,
									"es.uam.sara.tfg.dsl.JRule.Language");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)?
		)
		    |
		(
			otherlv_7='name '
			{
				newLeafNode(otherlv_7, grammarAccess.getNameAccess().getNameKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNameAccess().getOperatorNameOperatorEnumRuleCall_1_1_0());
					}
					lv_operator_8_0=ruleNameOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNameRule());
						}
						set(
							$current,
							"operator",
							lv_operator_8_0,
							"es.uam.sara.tfg.dsl.JRule.NameOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNameAccess().getNameEStringParserRuleCall_1_2_0());
					}
					lv_name_9_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNameRule());
						}
						set(
							$current,
							"name",
							lv_name_9_0,
							"es.uam.sara.tfg.dsl.JRule.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10='in'
				{
					newLeafNode(otherlv_10, grammarAccess.getNameAccess().getInKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNameAccess().getLanguageLanguageEnumRuleCall_1_3_1_0());
						}
						lv_Language_11_0=ruleLanguage
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNameRule());
							}
							set(
								$current,
								"Language",
								lv_Language_11_0,
								"es.uam.sara.tfg.dsl.JRule.Language");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				otherlv_12='and type name ='
				{
					newLeafNode(otherlv_12, grammarAccess.getNameAccess().getAndTypeNameKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNameAccess().getTypeNameTypeEnumRuleCall_1_4_1_0());
						}
						lv_type_13_0=ruleNameType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNameRule());
							}
							set(
								$current,
								"type",
								lv_type_13_0,
								"es.uam.sara.tfg.dsl.JRule.NameType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleJavaDoc
entryRuleJavaDoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaDocRule()); }
	iv_ruleJavaDoc=ruleJavaDoc
	{ $current=$iv_ruleJavaDoc.current; }
	EOF;

// Rule JavaDoc
ruleJavaDoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJavaDocAccess().getJavaDocAction_0(),
					$current);
			}
		)
		otherlv_1='JavaDoc'
		{
			newLeafNode(otherlv_1, grammarAccess.getJavaDocAccess().getJavaDocKeyword_1());
		}
		(
			(
				lv_author_2_0='@author'
				{
					newLeafNode(lv_author_2_0, grammarAccess.getJavaDocAccess().getAuthorAuthorKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "author", true, "@author");
				}
			)
		)?
		(
			(
				lv_parametre_3_0='@parameter'
				{
					newLeafNode(lv_parametre_3_0, grammarAccess.getJavaDocAccess().getParametreParameterKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "parametre", true, "@parameter");
				}
			)
		)?
		(
			(
				lv_return_4_0='@return'
				{
					newLeafNode(lv_return_4_0, grammarAccess.getJavaDocAccess().getReturnReturnKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "return", true, "@return");
				}
			)
		)?
		(
			(
				lv_version_5_0='@version'
				{
					newLeafNode(lv_version_5_0, grammarAccess.getJavaDocAccess().getVersionVersionKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "version", true, "@version");
				}
			)
		)?
		(
			(
				lv_throws_6_0='@throws'
				{
					newLeafNode(lv_throws_6_0, grammarAccess.getJavaDocAccess().getThrowsThrowsKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "throws", true, "@throws");
				}
			)
		)?
		(
			(
				lv_see_7_0='@see'
				{
					newLeafNode(lv_see_7_0, grammarAccess.getJavaDocAccess().getSeeSeeKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "see", true, "@see");
				}
			)
		)?
	)
;

// Entry rule entryRuleConteins
entryRuleConteins returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConteinsRule()); }
	iv_ruleConteins=ruleConteins
	{ $current=$iv_ruleConteins.current; }
	EOF;

// Rule Conteins
ruleConteins returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='have'
		{
			newLeafNode(otherlv_0, grammarAccess.getConteinsAccess().getHaveKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getConteinsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConteinsAccess().getWhichTestingParserRuleCall_2_0());
				}
				lv_which_2_0=ruleTesting
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConteinsRule());
					}
					set(
						$current,
						"which",
						lv_which_2_0,
						"es.uam.sara.tfg.dsl.JRule.Testing");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getConteinsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleModifiers
entryRuleModifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifiersRule()); }
	iv_ruleModifiers=ruleModifiers
	{ $current=$iv_ruleModifiers.current; }
	EOF;

// Rule Modifiers
ruleModifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='modifiers: '
		{
			newLeafNode(otherlv_0, grammarAccess.getModifiersAccess().getModifiersKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getModifiersAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifiersAccess().getBlendBlendModifiersParserRuleCall_2_0());
				}
				lv_blend_2_0=ruleBlendModifiers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifiersRule());
					}
					add(
						$current,
						"blend",
						lv_blend_2_0,
						"es.uam.sara.tfg.dsl.JRule.BlendModifiers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getModifiersAccess().getRightParenthesisKeyword_3());
		}
		(
			otherlv_4='or'
			{
				newLeafNode(otherlv_4, grammarAccess.getModifiersAccess().getOrKeyword_4_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getModifiersAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModifiersAccess().getBlendBlendModifiersParserRuleCall_4_2_0());
					}
					lv_blend_6_0=ruleBlendModifiers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModifiersRule());
						}
						add(
							$current,
							"blend",
							lv_blend_6_0,
							"es.uam.sara.tfg.dsl.JRule.BlendModifiers");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getModifiersAccess().getRightParenthesisKeyword_4_3());
			}
		)*
	)
;

// Entry rule entryRuleBlendModifiers
entryRuleBlendModifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlendModifiersRule()); }
	iv_ruleBlendModifiers=ruleBlendModifiers
	{ $current=$iv_ruleBlendModifiers.current; }
	EOF;

// Rule BlendModifiers
ruleBlendModifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlendModifiersAccess().getAccessAccessModifierEnumRuleCall_0_0_0());
					}
					lv_access_0_0=ruleAccessModifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlendModifiersRule());
						}
						set(
							$current,
							"access",
							lv_access_0_0,
							"es.uam.sara.tfg.dsl.JRule.AccessModifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_static_1_0='and static'
					{
						newLeafNode(lv_static_1_0, grammarAccess.getBlendModifiersAccess().getStaticAndStaticKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "static", true, "and static");
					}
				)
			)?
			(
				(
					lv_final_2_0='and final'
					{
						newLeafNode(lv_final_2_0, grammarAccess.getBlendModifiersAccess().getFinalAndFinalKeyword_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "final", true, "and final");
					}
				)
			)?
			(
				(
					lv_abstract_3_0='and abstract'
					{
						newLeafNode(lv_abstract_3_0, grammarAccess.getBlendModifiersAccess().getAbstractAndAbstractKeyword_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "abstract", true, "and abstract");
					}
				)
			)?
			(
				(
					lv_synchronized_4_0='and synchronized'
					{
						newLeafNode(lv_synchronized_4_0, grammarAccess.getBlendModifiersAccess().getSynchronizedAndSynchronizedKeyword_0_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "synchronized", true, "and synchronized");
					}
				)
			)?
		)
		    |
		(
			(
				(
					lv_static_5_0='static'
					{
						newLeafNode(lv_static_5_0, grammarAccess.getBlendModifiersAccess().getStaticStaticKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "static", true, "static");
					}
				)
			)
			(
				(
					lv_final_6_0='and final'
					{
						newLeafNode(lv_final_6_0, grammarAccess.getBlendModifiersAccess().getFinalAndFinalKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "final", true, "and final");
					}
				)
			)?
			(
				(
					lv_abstract_7_0='and abstract'
					{
						newLeafNode(lv_abstract_7_0, grammarAccess.getBlendModifiersAccess().getAbstractAndAbstractKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "abstract", true, "and abstract");
					}
				)
			)?
			(
				(
					lv_synchronized_8_0='and synchronized'
					{
						newLeafNode(lv_synchronized_8_0, grammarAccess.getBlendModifiersAccess().getSynchronizedAndSynchronizedKeyword_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "synchronized", true, "and synchronized");
					}
				)
			)?
		)
		    |
		(
			(
				(
					lv_final_9_0='final'
					{
						newLeafNode(lv_final_9_0, grammarAccess.getBlendModifiersAccess().getFinalFinalKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "final", true, "final");
					}
				)
			)
			(
				(
					lv_abstract_10_0='and abstract'
					{
						newLeafNode(lv_abstract_10_0, grammarAccess.getBlendModifiersAccess().getAbstractAndAbstractKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "abstract", true, "and abstract");
					}
				)
			)?
			(
				(
					lv_synchronized_11_0='and synchronized'
					{
						newLeafNode(lv_synchronized_11_0, grammarAccess.getBlendModifiersAccess().getSynchronizedAndSynchronizedKeyword_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "synchronized", true, "and synchronized");
					}
				)
			)?
		)
		    |
		(
			(
				(
					lv_abstract_12_0='abstract'
					{
						newLeafNode(lv_abstract_12_0, grammarAccess.getBlendModifiersAccess().getAbstractAbstractKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "abstract", true, "abstract");
					}
				)
			)
			(
				(
					lv_synchronized_13_0='and synchronized'
					{
						newLeafNode(lv_synchronized_13_0, grammarAccess.getBlendModifiersAccess().getSynchronizedAndSynchronizedKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "synchronized", true, "and synchronized");
					}
				)
			)?
		)
		    |
		(
			(
				lv_synchronized_14_0='synchronized'
				{
					newLeafNode(lv_synchronized_14_0, grammarAccess.getBlendModifiersAccess().getSynchronizedSynchronizedKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlendModifiersRule());
					}
					setWithLastConsumed($current, "synchronized", true, "synchronized");
				}
			)
		)
	)
;

// Entry rule entryRuleEBigInteger
entryRuleEBigInteger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBigIntegerRule()); }
	iv_ruleEBigInteger=ruleEBigInteger
	{ $current=$iv_ruleEBigInteger.current.getText(); }
	EOF;

// Rule EBigInteger
ruleEBigInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEBigIntegerAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEBigIntegerAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule Action
ruleAction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='check'
			{
				$current = grammarAccess.getActionAccess().getCheckEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionAccess().getCheckEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='correct'
			{
				$current = grammarAccess.getActionAccess().getCorrectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionAccess().getCorrectEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Quantifier
ruleQuantifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='one'
			{
				$current = grammarAccess.getQuantifierAccess().getOneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getQuantifierAccess().getOneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='exists'
			{
				$current = grammarAccess.getQuantifierAccess().getExistsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getQuantifierAccess().getExistsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='all'
			{
				$current = grammarAccess.getQuantifierAccess().getAllEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getQuantifierAccess().getAllEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ElementJava
ruleElementJava returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='package'
			{
				$current = grammarAccess.getElementJavaAccess().getPackageEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getElementJavaAccess().getPackageEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='class'
			{
				$current = grammarAccess.getElementJavaAccess().getClassEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getElementJavaAccess().getClassEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='interface'
			{
				$current = grammarAccess.getElementJavaAccess().getInterfaceEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getElementJavaAccess().getInterfaceEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='enum'
			{
				$current = grammarAccess.getElementJavaAccess().getEnumEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getElementJavaAccess().getEnumEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='method'
			{
				$current = grammarAccess.getElementJavaAccess().getMethodEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getElementJavaAccess().getMethodEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='attribute'
			{
				$current = grammarAccess.getElementJavaAccess().getAttributeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getElementJavaAccess().getAttributeEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule NameType
ruleNameType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='upperCase'
			{
				$current = grammarAccess.getNameTypeAccess().getUpperCaseEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNameTypeAccess().getUpperCaseEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='lowerCase'
			{
				$current = grammarAccess.getNameTypeAccess().getLowerCaseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNameTypeAccess().getLowerCaseEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='upperCamelCase'
			{
				$current = grammarAccess.getNameTypeAccess().getUpperCamelCaseEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNameTypeAccess().getUpperCamelCaseEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='lowerCamelCase'
			{
				$current = grammarAccess.getNameTypeAccess().getLowerCamelCaseEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNameTypeAccess().getLowerCamelCaseEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='startUpperCase'
			{
				$current = grammarAccess.getNameTypeAccess().getStartUpperCaseEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNameTypeAccess().getStartUpperCaseEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule NameOperator
ruleNameOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='like'
			{
				$current = grammarAccess.getNameOperatorAccess().getLikeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNameOperatorAccess().getLikeEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='equal'
			{
				$current = grammarAccess.getNameOperatorAccess().getEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNameOperatorAccess().getEqualEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Language
ruleLanguage returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='English'
			{
				$current = grammarAccess.getLanguageAccess().getENGLISHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLanguageAccess().getENGLISHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Spanish'
			{
				$current = grammarAccess.getLanguageAccess().getESPANIOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLanguageAccess().getESPANIOLEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AccessModifier
ruleAccessModifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Public'
			{
				$current = grammarAccess.getAccessModifierAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAccessModifierAccess().getPublicEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Protected'
			{
				$current = grammarAccess.getAccessModifierAccess().getProtectedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAccessModifierAccess().getProtectedEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Private'
			{
				$current = grammarAccess.getAccessModifierAccess().getPrivateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAccessModifierAccess().getPrivateEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
