/*
 * generated by Xtext 2.9.2
 */
package es.uam.sara.tfg.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javaRule.Rule
import java.lang.annotation.ElementType
import javaRule.ElementJava
import javaRule.Action
import javaRule.Name
import javaRule.JavaDoc
import javaRule.NameOperator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JRuleGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
		var i=1;
		for (rule :resource.allContents.toIterable.filter(Rule)){
			fsa.generateFile("Rule"+i+".java", rule.compile(i))
			i = i+1
		}
	}
	
	def compile (Rule rule, int i){
	'''
	import es.uam.sara.tfg.ast.Visitors;
	import es.uam.sara.tfg.ast.properties.Packages;
	
	public class Rule«i» implements Rule{
	
		@Override
		public void execute(Visitors visitors) {
			«IF rule.action==Action.CHECK»
				«IF rule.on.element.element == ElementJava.PACKAGE»
				«rule.packageImplementacion»
				«ELSEIF rule.on.element.element == ElementJava.INTERFACE»
				«rule.interfaceImplementacion»
				«ELSEIF rule.on.element.element == ElementJava.CLASS»
				«rule.classImplementacion»
				«ELSEIF rule.on.element.element == ElementJava.ENUM»
				«rule.enumImplementacion»
				«ELSEIF rule.on.element.element == ElementJava.METHOD»
				«rule.methodImplementacion»
				«ELSEIF rule.on.element.element == ElementJava.ATTRIBUTE»
				«rule.attributeImplementacion»
				«ENDIF»
			«ENDIF»
			}
	
	}
	'''}
	
	def packageImplementacion(Rule rule){'''
		Packages pack= new Packages (visitors.getPackages);
		//Faltan filtros
		«FOR or: rule.on.satisfy.op»
		ArrayList<Result<PackageDeclaration>> or=new ArrayList<Result<PackageDeclaration>>();
			«FOR and: or.op»
			ArrayList<Result<PackageDeclaration>> and=new ArrayList<Result<PackageDeclaration>>();
			«IF and instanceof JavaDoc»
			JavaDocPropertie jdp =new JavaDocPropertie («and.author», «and.parametre», «and.^return», «and.version», «and.throws», «and.see»);
			and.add(pack.JavaDoc (null, jdp));
			«ELSEIF and instanceof Name»
				«IF(and as Name).type!=null»
				and.add(pack.nameType(null, Name.«(and as Name).type»));
				«ENDIF»
				«IF (and as Name).operator!=null»
					«IF (and as Name).operator==NameOperator.EQUAL»
					and.add(pack.nameEqual(null, «(and as Name).name»));
					«ELSE»
					and.add(nameLike(null,  «(and as Name).name», Idioma.«(and as Name).language»));
					«ENDIF»
				«ENDIF»
			«ENDIF»
			or.add(Result.combinaAnd(and));
			«ENDFOR»
			Result.combinaOr(or,«rule.on.no»,«rule.on.quantifier»);
		«ENDFOR»
	'''	
	}
	
	def interfaceImplementacion(Rule rule){'''
		Interfaces inter=new Interfaces(visitors.getInterfaces);
	'''	
	}
	
	def classImplementacion(Rule rule){'''
		Classes classes=new Classes(visitors.getClasses);
	'''	
	}
	
	def enumImplementacion(Rule rule){'''
		Enumerations enums=new Enumerations (visitors.getEnumerations);
	'''	
	}
	
	def methodImplementacion(Rule rule){'''
		Methods methods= new Methods (visitors.getMethods);
	'''	
	}
	
	def attributeImplementacion(Rule rule){'''
		Attributes attri= new Attributes (visitors.getAttributes);
	'''	
	}
}
