/*
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JRulesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cProjectNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cProjectNameEStringParserRuleCall_2_0_0_0 = (RuleCall)cProjectNameAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cProjectNameAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cProjectNameEStringParserRuleCall_2_0_1_1_0 = (RuleCall)cProjectNameAssignment_2_0_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cSentencesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentencesSentenceParserRuleCall_3_0 = (RuleCall)cSentencesAssignment_3.eContents().get(0);
		private final Assignment cSentencesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSentencesSentenceParserRuleCall_4_0 = (RuleCall)cSentencesAssignment_4.eContents().get(0);
		
		//RuleSet:
		//	'Projects' 'Name:' (ProjectName+=EString ("," ProjectName+=EString)* | '*') sentences+=Sentence sentences+=Sentence*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Projects' 'Name:' (ProjectName+=EString ("," ProjectName+=EString)* | '*') sentences+=Sentence sentences+=Sentence*
		public Group getGroup() { return cGroup; }
		
		//'Projects'
		public Keyword getProjectsKeyword_0() { return cProjectsKeyword_0; }
		
		//'Name:'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//(ProjectName+=EString ("," ProjectName+=EString)* | '*')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ProjectName+=EString ("," ProjectName+=EString)*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//ProjectName+=EString
		public Assignment getProjectNameAssignment_2_0_0() { return cProjectNameAssignment_2_0_0; }
		
		//EString
		public RuleCall getProjectNameEStringParserRuleCall_2_0_0_0() { return cProjectNameEStringParserRuleCall_2_0_0_0; }
		
		//("," ProjectName+=EString)*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_2_0_1_0() { return cCommaKeyword_2_0_1_0; }
		
		//ProjectName+=EString
		public Assignment getProjectNameAssignment_2_0_1_1() { return cProjectNameAssignment_2_0_1_1; }
		
		//EString
		public RuleCall getProjectNameEStringParserRuleCall_2_0_1_1_0() { return cProjectNameEStringParserRuleCall_2_0_1_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }
		
		//sentences+=Sentence
		public Assignment getSentencesAssignment_3() { return cSentencesAssignment_3; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_3_0() { return cSentencesSentenceParserRuleCall_3_0; }
		
		//sentences+=Sentence*
		public Assignment getSentencesAssignment_4() { return cSentencesAssignment_4; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_4_0() { return cSentencesSentenceParserRuleCall_4_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Sentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sentence:
		//	(Variable | Rule) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Variable | Rule) ';'
		public Group getGroup() { return cGroup; }
		
		//(Variable | Rule)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0_0() { return cVariableParserRuleCall_0_0; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_0_1() { return cRuleParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementEnumRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFromAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFromVariableCrossReference_3_1_0 = (CrossReference)cFromAssignment_3_1.eContents().get(0);
		private final RuleCall cFromVariableEStringParserRuleCall_3_1_0_1 = (RuleCall)cFromVariableCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInVariableCrossReference_4_1_0 = (CrossReference)cInAssignment_4_1.eContents().get(0);
		private final RuleCall cInVariableEStringParserRuleCall_4_1_0_1 = (RuleCall)cInVariableCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cInVariableCrossReference_4_2_1_0 = (CrossReference)cInAssignment_4_2_1.eContents().get(0);
		private final RuleCall cInVariableEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cInVariableCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUsingAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUsingVariableSubtypeParserRuleCall_5_1_0 = (RuleCall)cUsingAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cUsingAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cUsingVariableSubtypeParserRuleCall_5_2_1_0 = (RuleCall)cUsingAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSatisfyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSatisfyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSatisfyOrParserRuleCall_6_1_0 = (RuleCall)cSatisfyAssignment_6_1.eContents().get(0);
		
		//Variable:
		//	name=EString ':'
		//	element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString] (',' in+=[Variable|EString])*)?
		//	('using' using+=VariableSubtype (',' using+=VariableSubtype)*)? ('satisfy' satisfy=Or)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString] (','
		//in+=[Variable|EString])*)? ('using' using+=VariableSubtype (',' using+=VariableSubtype)*)? ('satisfy' satisfy=Or)?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementEnumRuleCall_2_0() { return cElementElementEnumRuleCall_2_0; }
		
		//('from' from=[Variable|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'from'
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }
		
		//from=[Variable|EString]
		public Assignment getFromAssignment_3_1() { return cFromAssignment_3_1; }
		
		//[Variable|EString]
		public CrossReference getFromVariableCrossReference_3_1_0() { return cFromVariableCrossReference_3_1_0; }
		
		//EString
		public RuleCall getFromVariableEStringParserRuleCall_3_1_0_1() { return cFromVariableEStringParserRuleCall_3_1_0_1; }
		
		//('in' in+=[Variable|EString] (',' in+=[Variable|EString])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//in+=[Variable|EString]
		public Assignment getInAssignment_4_1() { return cInAssignment_4_1; }
		
		//[Variable|EString]
		public CrossReference getInVariableCrossReference_4_1_0() { return cInVariableCrossReference_4_1_0; }
		
		//EString
		public RuleCall getInVariableEStringParserRuleCall_4_1_0_1() { return cInVariableEStringParserRuleCall_4_1_0_1; }
		
		//(',' in+=[Variable|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//in+=[Variable|EString]
		public Assignment getInAssignment_4_2_1() { return cInAssignment_4_2_1; }
		
		//[Variable|EString]
		public CrossReference getInVariableCrossReference_4_2_1_0() { return cInVariableCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getInVariableEStringParserRuleCall_4_2_1_0_1() { return cInVariableEStringParserRuleCall_4_2_1_0_1; }
		
		//('using' using+=VariableSubtype (',' using+=VariableSubtype)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//using+=VariableSubtype
		public Assignment getUsingAssignment_5_1() { return cUsingAssignment_5_1; }
		
		//VariableSubtype
		public RuleCall getUsingVariableSubtypeParserRuleCall_5_1_0() { return cUsingVariableSubtypeParserRuleCall_5_1_0; }
		
		//(',' using+=VariableSubtype)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//using+=VariableSubtype
		public Assignment getUsingAssignment_5_2_1() { return cUsingAssignment_5_2_1; }
		
		//VariableSubtype
		public RuleCall getUsingVariableSubtypeParserRuleCall_5_2_1_0() { return cUsingVariableSubtypeParserRuleCall_5_2_1_0; }
		
		//('satisfy' satisfy=Or)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'satisfy'
		public Keyword getSatisfyKeyword_6_0() { return cSatisfyKeyword_6_0; }
		
		//satisfy=Or
		public Assignment getSatisfyAssignment_6_1() { return cSatisfyAssignment_6_1; }
		
		//Or
		public RuleCall getSatisfyOrParserRuleCall_6_1_0() { return cSatisfyOrParserRuleCall_6_1_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNoNoKeyword_0_0 = (Keyword)cNoAssignment_0.eContents().get(0);
		private final Assignment cQuantifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantifierQuantifierEnumRuleCall_1_0 = (RuleCall)cQuantifierAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementEnumRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFromAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFromVariableCrossReference_3_1_0 = (CrossReference)cFromAssignment_3_1.eContents().get(0);
		private final RuleCall cFromVariableEStringParserRuleCall_3_1_0_1 = (RuleCall)cFromVariableCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInVariableCrossReference_4_1_0 = (CrossReference)cInAssignment_4_1.eContents().get(0);
		private final RuleCall cInVariableEStringParserRuleCall_4_1_0_1 = (RuleCall)cInVariableCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cInVariableCrossReference_4_2_1_0 = (CrossReference)cInAssignment_4_2_1.eContents().get(0);
		private final RuleCall cInVariableEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cInVariableCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUsingAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUsingVariableSubtypeParserRuleCall_5_1_0 = (RuleCall)cUsingAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cUsingAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cUsingVariableSubtypeParserRuleCall_5_2_1_0 = (RuleCall)cUsingAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhichKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFilterAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFilterOrParserRuleCall_6_1_0 = (RuleCall)cFilterAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSatisfyKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSatisfyAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSatisfyOrParserRuleCall_7_1_0 = (RuleCall)cSatisfyAssignment_7_1.eContents().get(0);
		
		//Rule:
		//	no?='no'? quantifier=Quantifier element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString] (','
		//	in+=[Variable|EString])*)? ('using' using+=VariableSubtype (',' using+=VariableSubtype)*)? ('which' filter=Or)?
		//	('satisfy' satisfy=Or)?;
		@Override public ParserRule getRule() { return rule; }
		
		//no?='no'? quantifier=Quantifier element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString] (','
		//in+=[Variable|EString])*)? ('using' using+=VariableSubtype (',' using+=VariableSubtype)*)? ('which' filter=Or)?
		//('satisfy' satisfy=Or)?
		public Group getGroup() { return cGroup; }
		
		//no?='no'?
		public Assignment getNoAssignment_0() { return cNoAssignment_0; }
		
		//'no'
		public Keyword getNoNoKeyword_0_0() { return cNoNoKeyword_0_0; }
		
		//quantifier=Quantifier
		public Assignment getQuantifierAssignment_1() { return cQuantifierAssignment_1; }
		
		//Quantifier
		public RuleCall getQuantifierQuantifierEnumRuleCall_1_0() { return cQuantifierQuantifierEnumRuleCall_1_0; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementEnumRuleCall_2_0() { return cElementElementEnumRuleCall_2_0; }
		
		//('from' from=[Variable|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'from'
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }
		
		//from=[Variable|EString]
		public Assignment getFromAssignment_3_1() { return cFromAssignment_3_1; }
		
		//[Variable|EString]
		public CrossReference getFromVariableCrossReference_3_1_0() { return cFromVariableCrossReference_3_1_0; }
		
		//EString
		public RuleCall getFromVariableEStringParserRuleCall_3_1_0_1() { return cFromVariableEStringParserRuleCall_3_1_0_1; }
		
		//('in' in+=[Variable|EString] (',' in+=[Variable|EString])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//in+=[Variable|EString]
		public Assignment getInAssignment_4_1() { return cInAssignment_4_1; }
		
		//[Variable|EString]
		public CrossReference getInVariableCrossReference_4_1_0() { return cInVariableCrossReference_4_1_0; }
		
		//EString
		public RuleCall getInVariableEStringParserRuleCall_4_1_0_1() { return cInVariableEStringParserRuleCall_4_1_0_1; }
		
		//(',' in+=[Variable|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//in+=[Variable|EString]
		public Assignment getInAssignment_4_2_1() { return cInAssignment_4_2_1; }
		
		//[Variable|EString]
		public CrossReference getInVariableCrossReference_4_2_1_0() { return cInVariableCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getInVariableEStringParserRuleCall_4_2_1_0_1() { return cInVariableEStringParserRuleCall_4_2_1_0_1; }
		
		//('using' using+=VariableSubtype (',' using+=VariableSubtype)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//using+=VariableSubtype
		public Assignment getUsingAssignment_5_1() { return cUsingAssignment_5_1; }
		
		//VariableSubtype
		public RuleCall getUsingVariableSubtypeParserRuleCall_5_1_0() { return cUsingVariableSubtypeParserRuleCall_5_1_0; }
		
		//(',' using+=VariableSubtype)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//using+=VariableSubtype
		public Assignment getUsingAssignment_5_2_1() { return cUsingAssignment_5_2_1; }
		
		//VariableSubtype
		public RuleCall getUsingVariableSubtypeParserRuleCall_5_2_1_0() { return cUsingVariableSubtypeParserRuleCall_5_2_1_0; }
		
		//('which' filter=Or)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'which'
		public Keyword getWhichKeyword_6_0() { return cWhichKeyword_6_0; }
		
		//filter=Or
		public Assignment getFilterAssignment_6_1() { return cFilterAssignment_6_1; }
		
		//Or
		public RuleCall getFilterOrParserRuleCall_6_1_0() { return cFilterOrParserRuleCall_6_1_0; }
		
		//('satisfy' satisfy=Or)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'satisfy'
		public Keyword getSatisfyKeyword_7_0() { return cSatisfyKeyword_7_0; }
		
		//satisfy=Or
		public Assignment getSatisfyAssignment_7_1() { return cSatisfyAssignment_7_1; }
		
		//Or
		public RuleCall getSatisfyOrParserRuleCall_7_1_0() { return cSatisfyOrParserRuleCall_7_1_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAndParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//Or:
		//	op+=And ('or' op+=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=And ('or' op+=And)*
		public Group getGroup() { return cGroup; }
		
		//op+=And
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//And
		public RuleCall getOpAndParserRuleCall_0_0() { return cOpAndParserRuleCall_0_0; }
		
		//('or' op+=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//op+=And
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//And
		public RuleCall getOpAndParserRuleCall_1_1_0() { return cOpAndParserRuleCall_1_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpPrimaryOpParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpPrimaryOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//And:
		//	op+=PrimaryOp ('and' op+=PrimaryOp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=PrimaryOp ('and' op+=PrimaryOp)*
		public Group getGroup() { return cGroup; }
		
		//op+=PrimaryOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//PrimaryOp
		public RuleCall getOpPrimaryOpParserRuleCall_0_0() { return cOpPrimaryOpParserRuleCall_0_0; }
		
		//('and' op+=PrimaryOp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//op+=PrimaryOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//PrimaryOp
		public RuleCall getOpPrimaryOpParserRuleCall_1_1_0() { return cOpPrimaryOpParserRuleCall_1_1_0; }
	}
	public class PrimaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.PrimaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cOrParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cPropertyLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryOp:
		//	'(' Or ')' | PropertyLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Or ')' | PropertyLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Or ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Or
		public RuleCall getOrParserRuleCall_0_1() { return cOrParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//PropertyLiteral
		public RuleCall getPropertyLiteralParserRuleCall_1() { return cPropertyLiteralParserRuleCall_1; }
	}
	public class PropertyLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.PropertyLiteral");
		private final Assignment cPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_0 = (RuleCall)cPropertyAssignment.eContents().get(0);
		
		//PropertyLiteral:
		//	property=Property;
		@Override public ParserRule getRule() { return rule; }
		
		//property=Property
		public Assignment getPropertyAssignment() { return cPropertyAssignment; }
		
		//Property
		public RuleCall getPropertyPropertyParserRuleCall_0() { return cPropertyPropertyParserRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsImplementedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsSuperInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsSuperClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsSubClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImplementsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExtendsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTamanioParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cParameterParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConstructorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReturnParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAttributeTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInitializeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cEmptyParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cIsGenericParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cNameOperationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cNameTypeParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cContainsParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cJavaDocParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cModifiersParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		
		//Property:
		//	IsImplemented | IsSuperInterface | IsSuperClass | IsSubClass | Implements | Extends | Tamanio | Parameter |
		//	Constructor | Return | AttributeType | Initialize | Empty | IsGeneric | NameOperation | NameType | Contains | JavaDoc
		//	| Modifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//IsImplemented | IsSuperInterface | IsSuperClass | IsSubClass | Implements | Extends | Tamanio | Parameter | Constructor
		//| Return | AttributeType | Initialize | Empty | IsGeneric | NameOperation | NameType | Contains | JavaDoc | Modifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsImplemented
		public RuleCall getIsImplementedParserRuleCall_0() { return cIsImplementedParserRuleCall_0; }
		
		//IsSuperInterface
		public RuleCall getIsSuperInterfaceParserRuleCall_1() { return cIsSuperInterfaceParserRuleCall_1; }
		
		//IsSuperClass
		public RuleCall getIsSuperClassParserRuleCall_2() { return cIsSuperClassParserRuleCall_2; }
		
		//IsSubClass
		public RuleCall getIsSubClassParserRuleCall_3() { return cIsSubClassParserRuleCall_3; }
		
		//Implements
		public RuleCall getImplementsParserRuleCall_4() { return cImplementsParserRuleCall_4; }
		
		//Extends
		public RuleCall getExtendsParserRuleCall_5() { return cExtendsParserRuleCall_5; }
		
		//Tamanio
		public RuleCall getTamanioParserRuleCall_6() { return cTamanioParserRuleCall_6; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_7() { return cParameterParserRuleCall_7; }
		
		//Constructor
		public RuleCall getConstructorParserRuleCall_8() { return cConstructorParserRuleCall_8; }
		
		//Return
		public RuleCall getReturnParserRuleCall_9() { return cReturnParserRuleCall_9; }
		
		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_10() { return cAttributeTypeParserRuleCall_10; }
		
		//Initialize
		public RuleCall getInitializeParserRuleCall_11() { return cInitializeParserRuleCall_11; }
		
		//Empty
		public RuleCall getEmptyParserRuleCall_12() { return cEmptyParserRuleCall_12; }
		
		//IsGeneric
		public RuleCall getIsGenericParserRuleCall_13() { return cIsGenericParserRuleCall_13; }
		
		//NameOperation
		public RuleCall getNameOperationParserRuleCall_14() { return cNameOperationParserRuleCall_14; }
		
		//NameType
		public RuleCall getNameTypeParserRuleCall_15() { return cNameTypeParserRuleCall_15; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_16() { return cContainsParserRuleCall_16; }
		
		//JavaDoc
		public RuleCall getJavaDocParserRuleCall_17() { return cJavaDocParserRuleCall_17; }
		
		//Modifiers
		public RuleCall getModifiersParserRuleCall_18() { return cModifiersParserRuleCall_18; }
	}
	public class IsImplementedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsImplemented");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAreKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNoNotKeyword_1_0 = (Keyword)cNoAssignment_1.eContents().get(0);
		private final Keyword cImplementedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValoresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValoresRangoNamesParserRuleCall_3_0 = (RuleCall)cValoresAssignment_3.eContents().get(0);
		
		//IsImplemented:
		//	('is' | 'are') no?='not'? 'implemented' valores=RangoNames;
		@Override public ParserRule getRule() { return rule; }
		
		//('is' | 'are') no?='not'? 'implemented' valores=RangoNames
		public Group getGroup() { return cGroup; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'is'
		public Keyword getIsKeyword_0_0() { return cIsKeyword_0_0; }
		
		//'are'
		public Keyword getAreKeyword_0_1() { return cAreKeyword_0_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_1() { return cNoAssignment_1; }
		
		//'not'
		public Keyword getNoNotKeyword_1_0() { return cNoNotKeyword_1_0; }
		
		//'implemented'
		public Keyword getImplementedKeyword_2() { return cImplementedKeyword_2; }
		
		//valores=RangoNames
		public Assignment getValoresAssignment_3() { return cValoresAssignment_3; }
		
		//RangoNames
		public RuleCall getValoresRangoNamesParserRuleCall_3_0() { return cValoresRangoNamesParserRuleCall_3_0; }
	}
	public class IsSuperInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsSuperInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAreKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNoNotKeyword_1_0 = (Keyword)cNoAssignment_1.eContents().get(0);
		private final Keyword cSuperinterfaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValoresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValoresRangoNamesParserRuleCall_3_0 = (RuleCall)cValoresAssignment_3.eContents().get(0);
		
		//IsSuperInterface:
		//	('is' | 'are') no?='not'? 'superinterface' valores=RangoNames;
		@Override public ParserRule getRule() { return rule; }
		
		//('is' | 'are') no?='not'? 'superinterface' valores=RangoNames
		public Group getGroup() { return cGroup; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'is'
		public Keyword getIsKeyword_0_0() { return cIsKeyword_0_0; }
		
		//'are'
		public Keyword getAreKeyword_0_1() { return cAreKeyword_0_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_1() { return cNoAssignment_1; }
		
		//'not'
		public Keyword getNoNotKeyword_1_0() { return cNoNotKeyword_1_0; }
		
		//'superinterface'
		public Keyword getSuperinterfaceKeyword_2() { return cSuperinterfaceKeyword_2; }
		
		//valores=RangoNames
		public Assignment getValoresAssignment_3() { return cValoresAssignment_3; }
		
		//RangoNames
		public RuleCall getValoresRangoNamesParserRuleCall_3_0() { return cValoresRangoNamesParserRuleCall_3_0; }
	}
	public class IsSuperClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsSuperClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAreKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNoNotKeyword_1_0 = (Keyword)cNoAssignment_1.eContents().get(0);
		private final Keyword cSuperclassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValoresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValoresRangoNamesParserRuleCall_3_0 = (RuleCall)cValoresAssignment_3.eContents().get(0);
		
		//IsSuperClass:
		//	('is' | 'are') no?='not'? 'superclass' valores=RangoNames;
		@Override public ParserRule getRule() { return rule; }
		
		//('is' | 'are') no?='not'? 'superclass' valores=RangoNames
		public Group getGroup() { return cGroup; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'is'
		public Keyword getIsKeyword_0_0() { return cIsKeyword_0_0; }
		
		//'are'
		public Keyword getAreKeyword_0_1() { return cAreKeyword_0_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_1() { return cNoAssignment_1; }
		
		//'not'
		public Keyword getNoNotKeyword_1_0() { return cNoNotKeyword_1_0; }
		
		//'superclass'
		public Keyword getSuperclassKeyword_2() { return cSuperclassKeyword_2; }
		
		//valores=RangoNames
		public Assignment getValoresAssignment_3() { return cValoresAssignment_3; }
		
		//RangoNames
		public RuleCall getValoresRangoNamesParserRuleCall_3_0() { return cValoresRangoNamesParserRuleCall_3_0; }
	}
	public class IsSubClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsSubClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsSubClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNoNotKeyword_2_0 = (Keyword)cNoAssignment_2.eContents().get(0);
		private final Keyword cSubclassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOfAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOfStringPropertyParserRuleCall_4_1_0 = (RuleCall)cOfAssignment_4_1.eContents().get(0);
		
		//IsSubClass:
		//	{IsSubClass} ('is' | 'are') no?='not'? 'subclass' ('of' of=StringProperty)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsSubClass} ('is' | 'are') no?='not'? 'subclass' ('of' of=StringProperty)?
		public Group getGroup() { return cGroup; }
		
		//{IsSubClass}
		public Action getIsSubClassAction_0() { return cIsSubClassAction_0; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'are'
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_2() { return cNoAssignment_2; }
		
		//'not'
		public Keyword getNoNotKeyword_2_0() { return cNoNotKeyword_2_0; }
		
		//'subclass'
		public Keyword getSubclassKeyword_3() { return cSubclassKeyword_3; }
		
		//('of' of=StringProperty)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'of'
		public Keyword getOfKeyword_4_0() { return cOfKeyword_4_0; }
		
		//of=StringProperty
		public Assignment getOfAssignment_4_1() { return cOfAssignment_4_1; }
		
		//StringProperty
		public RuleCall getOfStringPropertyParserRuleCall_4_1_0() { return cOfStringPropertyParserRuleCall_4_1_0; }
	}
	public class ImplementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Implements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cNoAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cNoDoKeyword_0_0_0_0 = (Keyword)cNoAssignment_0_0_0.eContents().get(0);
		private final Keyword cNotKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cNoAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNoDonTKeyword_0_1_0 = (Keyword)cNoAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cNoAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cNoDoesKeyword_0_2_0_0 = (Keyword)cNoAssignment_0_2_0.eContents().get(0);
		private final Keyword cNotKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cNoAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cNoDoesnTKeyword_0_3_0 = (Keyword)cNoAssignment_0_3.eContents().get(0);
		private final Keyword cImplementsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValoresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValoresRangoNamesParserRuleCall_2_0 = (RuleCall)cValoresAssignment_2.eContents().get(0);
		
		//Implements:
		//	(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'implements' valores=RangoNames;
		@Override public ParserRule getRule() { return rule; }
		
		//(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'implements' valores=RangoNames
		public Group getGroup() { return cGroup; }
		
		//(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//no?='do' 'not'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//no?='do'
		public Assignment getNoAssignment_0_0_0() { return cNoAssignment_0_0_0; }
		
		//'do'
		public Keyword getNoDoKeyword_0_0_0_0() { return cNoDoKeyword_0_0_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0_1() { return cNotKeyword_0_0_1; }
		
		//no?='don\'t'
		public Assignment getNoAssignment_0_1() { return cNoAssignment_0_1; }
		
		//'don\'t'
		public Keyword getNoDonTKeyword_0_1_0() { return cNoDonTKeyword_0_1_0; }
		
		//no?='does' 'not'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//no?='does'
		public Assignment getNoAssignment_0_2_0() { return cNoAssignment_0_2_0; }
		
		//'does'
		public Keyword getNoDoesKeyword_0_2_0_0() { return cNoDoesKeyword_0_2_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_2_1() { return cNotKeyword_0_2_1; }
		
		//no?='doesn\'t'
		public Assignment getNoAssignment_0_3() { return cNoAssignment_0_3; }
		
		//'doesn\'t'
		public Keyword getNoDoesnTKeyword_0_3_0() { return cNoDoesnTKeyword_0_3_0; }
		
		//'implements'
		public Keyword getImplementsKeyword_1() { return cImplementsKeyword_1; }
		
		//valores=RangoNames
		public Assignment getValoresAssignment_2() { return cValoresAssignment_2; }
		
		//RangoNames
		public RuleCall getValoresRangoNamesParserRuleCall_2_0() { return cValoresRangoNamesParserRuleCall_2_0; }
	}
	public class ExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Extends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cNoAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cNoDoKeyword_0_0_0_0 = (Keyword)cNoAssignment_0_0_0.eContents().get(0);
		private final Keyword cNotKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cNoAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNoDonTKeyword_0_1_0 = (Keyword)cNoAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cNoAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cNoDoesKeyword_0_2_0_0 = (Keyword)cNoAssignment_0_2_0.eContents().get(0);
		private final Keyword cNotKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cNoAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cNoDoesnTKeyword_0_3_0 = (Keyword)cNoAssignment_0_3.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValoresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValoresRangoNamesParserRuleCall_2_0 = (RuleCall)cValoresAssignment_2.eContents().get(0);
		
		//Extends:
		//	(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'extends' valores=RangoNames;
		@Override public ParserRule getRule() { return rule; }
		
		//(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'extends' valores=RangoNames
		public Group getGroup() { return cGroup; }
		
		//(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//no?='do' 'not'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//no?='do'
		public Assignment getNoAssignment_0_0_0() { return cNoAssignment_0_0_0; }
		
		//'do'
		public Keyword getNoDoKeyword_0_0_0_0() { return cNoDoKeyword_0_0_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0_1() { return cNotKeyword_0_0_1; }
		
		//no?='don\'t'
		public Assignment getNoAssignment_0_1() { return cNoAssignment_0_1; }
		
		//'don\'t'
		public Keyword getNoDonTKeyword_0_1_0() { return cNoDonTKeyword_0_1_0; }
		
		//no?='does' 'not'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//no?='does'
		public Assignment getNoAssignment_0_2_0() { return cNoAssignment_0_2_0; }
		
		//'does'
		public Keyword getNoDoesKeyword_0_2_0_0() { return cNoDoesKeyword_0_2_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_2_1() { return cNotKeyword_0_2_1; }
		
		//no?='doesn\'t'
		public Assignment getNoAssignment_0_3() { return cNoAssignment_0_3; }
		
		//'doesn\'t'
		public Keyword getNoDoesnTKeyword_0_3_0() { return cNoDoesnTKeyword_0_3_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }
		
		//valores=RangoNames
		public Assignment getValoresAssignment_2() { return cValoresAssignment_2; }
		
		//RangoNames
		public RuleCall getValoresRangoNamesParserRuleCall_2_0() { return cValoresRangoNamesParserRuleCall_2_0; }
	}
	public class TamanioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Tamanio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Assignment cNoAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cNoLessThanSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cNoAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cExactAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExactEIntParserRuleCall_1_0_1_0 = (RuleCall)cExactAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMinAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_1_1_1_0 = (RuleCall)cMinAssignment_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Assignment cMaxAssignment_1_1_3_0 = (Assignment)cAlternatives_1_1_3.eContents().get(0);
		private final RuleCall cMaxEIntParserRuleCall_1_1_3_0_0 = (RuleCall)cMaxAssignment_1_1_3_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_3_1 = (Keyword)cAlternatives_1_1_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		
		//Tamanio:
		//	'size' (('=' | no?='<>') exact=EInt | '[' min=EInt '..' (max=EInt | '*') ']');
		@Override public ParserRule getRule() { return rule; }
		
		//'size' (('=' | no?='<>') exact=EInt | '[' min=EInt '..' (max=EInt | '*') ']')
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//(('=' | no?='<>') exact=EInt | '[' min=EInt '..' (max=EInt | '*') ']')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('=' | no?='<>') exact=EInt
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('=' | no?='<>')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0_0() { return cEqualsSignKeyword_1_0_0_0; }
		
		//no?='<>'
		public Assignment getNoAssignment_1_0_0_1() { return cNoAssignment_1_0_0_1; }
		
		//'<>'
		public Keyword getNoLessThanSignGreaterThanSignKeyword_1_0_0_1_0() { return cNoLessThanSignGreaterThanSignKeyword_1_0_0_1_0; }
		
		//exact=EInt
		public Assignment getExactAssignment_1_0_1() { return cExactAssignment_1_0_1; }
		
		//EInt
		public RuleCall getExactEIntParserRuleCall_1_0_1_0() { return cExactEIntParserRuleCall_1_0_1_0; }
		
		//'[' min=EInt '..' (max=EInt | '*') ']'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//min=EInt
		public Assignment getMinAssignment_1_1_1() { return cMinAssignment_1_1_1; }
		
		//EInt
		public RuleCall getMinEIntParserRuleCall_1_1_1_0() { return cMinEIntParserRuleCall_1_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_1_2() { return cFullStopFullStopKeyword_1_1_2; }
		
		//(max=EInt | '*')
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }
		
		//max=EInt
		public Assignment getMaxAssignment_1_1_3_0() { return cMaxAssignment_1_1_3_0; }
		
		//EInt
		public RuleCall getMaxEIntParserRuleCall_1_1_3_0_0() { return cMaxEIntParserRuleCall_1_1_3_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_3_1() { return cAsteriskKeyword_1_1_3_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_4() { return cRightSquareBracketKeyword_1_1_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParametersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cSizeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_0_1_0 = (Alternatives)cGroup_2_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1_0_0 = (Keyword)cAlternatives_2_0_1_0.eContents().get(0);
		private final Assignment cNoAssignment_2_0_1_0_1 = (Assignment)cAlternatives_2_0_1_0.eContents().get(1);
		private final Keyword cNoLessThanSignGreaterThanSignKeyword_2_0_1_0_1_0 = (Keyword)cNoAssignment_2_0_1_0_1.eContents().get(0);
		private final Assignment cExactAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cExactEIntParserRuleCall_2_0_1_1_0 = (RuleCall)cExactAssignment_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMinAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_2_1_1_0 = (RuleCall)cMinAssignment_2_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Alternatives cAlternatives_2_1_3 = (Alternatives)cGroup_2_1.eContents().get(3);
		private final Assignment cMaxAssignment_2_1_3_0 = (Assignment)cAlternatives_2_1_3.eContents().get(0);
		private final RuleCall cMaxEIntParserRuleCall_2_1_3_0_0 = (RuleCall)cMaxAssignment_2_1_3_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1_3_1 = (Keyword)cAlternatives_2_1_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypesAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTypesTypePropertyParserRuleCall_3_3_0 = (RuleCall)cTypesAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cCommaKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cTypesAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cTypesTypePropertyParserRuleCall_3_4_1_0 = (RuleCall)cTypesAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//Parameter:
		//	{Parameter}
		//	'parameters' ('size' (('=' | no?='<>') exact=EInt) | '[' min=EInt '..' (max=EInt | '*') ']')? ('types' '=' '['
		//	types+=TypeProperty (',' types+=TypeProperty)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} 'parameters' ('size' (('=' | no?='<>') exact=EInt) | '[' min=EInt '..' (max=EInt | '*') ']')? ('types' '='
		//'[' types+=TypeProperty (',' types+=TypeProperty)* ']')?
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'parameters'
		public Keyword getParametersKeyword_1() { return cParametersKeyword_1; }
		
		//('size' (('=' | no?='<>') exact=EInt) | '[' min=EInt '..' (max=EInt | '*') ']')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'size' (('=' | no?='<>') exact=EInt)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'size'
		public Keyword getSizeKeyword_2_0_0() { return cSizeKeyword_2_0_0; }
		
		//(('=' | no?='<>') exact=EInt)
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//('=' | no?='<>')
		public Alternatives getAlternatives_2_0_1_0() { return cAlternatives_2_0_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_1_0_0() { return cEqualsSignKeyword_2_0_1_0_0; }
		
		//no?='<>'
		public Assignment getNoAssignment_2_0_1_0_1() { return cNoAssignment_2_0_1_0_1; }
		
		//'<>'
		public Keyword getNoLessThanSignGreaterThanSignKeyword_2_0_1_0_1_0() { return cNoLessThanSignGreaterThanSignKeyword_2_0_1_0_1_0; }
		
		//exact=EInt
		public Assignment getExactAssignment_2_0_1_1() { return cExactAssignment_2_0_1_1; }
		
		//EInt
		public RuleCall getExactEIntParserRuleCall_2_0_1_1_0() { return cExactEIntParserRuleCall_2_0_1_1_0; }
		
		//'[' min=EInt '..' (max=EInt | '*') ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }
		
		//min=EInt
		public Assignment getMinAssignment_2_1_1() { return cMinAssignment_2_1_1; }
		
		//EInt
		public RuleCall getMinEIntParserRuleCall_2_1_1_0() { return cMinEIntParserRuleCall_2_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_1_2() { return cFullStopFullStopKeyword_2_1_2; }
		
		//(max=EInt | '*')
		public Alternatives getAlternatives_2_1_3() { return cAlternatives_2_1_3; }
		
		//max=EInt
		public Assignment getMaxAssignment_2_1_3_0() { return cMaxAssignment_2_1_3_0; }
		
		//EInt
		public RuleCall getMaxEIntParserRuleCall_2_1_3_0_0() { return cMaxEIntParserRuleCall_2_1_3_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1_3_1() { return cAsteriskKeyword_2_1_3_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_4() { return cRightSquareBracketKeyword_2_1_4; }
		
		//('types' '=' '[' types+=TypeProperty (',' types+=TypeProperty)* ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'types'
		public Keyword getTypesKeyword_3_0() { return cTypesKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }
		
		//types+=TypeProperty
		public Assignment getTypesAssignment_3_3() { return cTypesAssignment_3_3; }
		
		//TypeProperty
		public RuleCall getTypesTypePropertyParserRuleCall_3_3_0() { return cTypesTypePropertyParserRuleCall_3_3_0; }
		
		//(',' types+=TypeProperty)*
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//','
		public Keyword getCommaKeyword_3_4_0() { return cCommaKeyword_3_4_0; }
		
		//types+=TypeProperty
		public Assignment getTypesAssignment_3_4_1() { return cTypesAssignment_3_4_1; }
		
		//TypeProperty
		public RuleCall getTypesTypePropertyParserRuleCall_3_4_1_0() { return cTypesTypePropertyParserRuleCall_3_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_5() { return cRightSquareBracketKeyword_3_5; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNoNotKeyword_2_0 = (Keyword)cNoAssignment_2.eContents().get(0);
		private final Keyword cConstructorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constructor:
		//	{Constructor} ('is' | 'are') no?='not'? 'constructor';
		@Override public ParserRule getRule() { return rule; }
		
		//{Constructor} ('is' | 'are') no?='not'? 'constructor'
		public Group getGroup() { return cGroup; }
		
		//{Constructor}
		public Action getConstructorAction_0() { return cConstructorAction_0; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'are'
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_2() { return cNoAssignment_2; }
		
		//'not'
		public Keyword getNoNotKeyword_2_0() { return cNoNotKeyword_2_0; }
		
		//'constructor'
		public Keyword getConstructorKeyword_3() { return cConstructorKeyword_3; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cNoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNoLessThanSignGreaterThanSignKeyword_2_1_0 = (Keyword)cNoAssignment_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypePropertyParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Return:
		//	'return' 'type' ('=' | no?='<>') type=TypeProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' 'type' ('=' | no?='<>') type=TypeProperty
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//('=' | no?='<>')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//no?='<>'
		public Assignment getNoAssignment_2_1() { return cNoAssignment_2_1; }
		
		//'<>'
		public Keyword getNoLessThanSignGreaterThanSignKeyword_2_1_0() { return cNoLessThanSignGreaterThanSignKeyword_2_1_0; }
		
		//type=TypeProperty
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeProperty
		public RuleCall getTypeTypePropertyParserRuleCall_3_0() { return cTypeTypePropertyParserRuleCall_3_0; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.AttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cNoAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cNoLessThanSignGreaterThanSignKeyword_1_1_0 = (Keyword)cNoAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypePropertyParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//AttributeType:
		//	'type' ('=' | no?='<>') type=TypeProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' ('=' | no?='<>') type=TypeProperty
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//('=' | no?='<>')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//no?='<>'
		public Assignment getNoAssignment_1_1() { return cNoAssignment_1_1; }
		
		//'<>'
		public Keyword getNoLessThanSignGreaterThanSignKeyword_1_1_0() { return cNoLessThanSignGreaterThanSignKeyword_1_1_0; }
		
		//type=TypeProperty
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeProperty
		public RuleCall getTypeTypePropertyParserRuleCall_2_0() { return cTypeTypePropertyParserRuleCall_2_0; }
	}
	public class InitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Initialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNoNotKeyword_2_0 = (Keyword)cNoAssignment_2.eContents().get(0);
		private final Keyword cInitializeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Initialize:
		//	{Initialize} ('is' | 'are') no?='not'? 'initialize';
		@Override public ParserRule getRule() { return rule; }
		
		//{Initialize} ('is' | 'are') no?='not'? 'initialize'
		public Group getGroup() { return cGroup; }
		
		//{Initialize}
		public Action getInitializeAction_0() { return cInitializeAction_0; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'are'
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_2() { return cNoAssignment_2; }
		
		//'not'
		public Keyword getNoNotKeyword_2_0() { return cNoNotKeyword_2_0; }
		
		//'initialize'
		public Keyword getInitializeKeyword_3() { return cInitializeKeyword_3; }
	}
	public class EmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Empty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNoNotKeyword_2_0 = (Keyword)cNoAssignment_2.eContents().get(0);
		private final Keyword cEmptyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Empty:
		//	{Empty} ('is' | 'are') no?='not'? 'empty';
		@Override public ParserRule getRule() { return rule; }
		
		//{Empty} ('is' | 'are') no?='not'? 'empty'
		public Group getGroup() { return cGroup; }
		
		//{Empty}
		public Action getEmptyAction_0() { return cEmptyAction_0; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'are'
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_2() { return cNoAssignment_2; }
		
		//'not'
		public Keyword getNoNotKeyword_2_0() { return cNoNotKeyword_2_0; }
		
		//'empty'
		public Keyword getEmptyKeyword_3() { return cEmptyKeyword_3; }
	}
	public class IsGenericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsGeneric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsGenericAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNoNotKeyword_2_0 = (Keyword)cNoAssignment_2.eContents().get(0);
		private final Keyword cGenericKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsGeneric:
		//	{IsGeneric} ('is' | 'are') no?='not'? 'generic';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsGeneric} ('is' | 'are') no?='not'? 'generic'
		public Group getGroup() { return cGroup; }
		
		//{IsGeneric}
		public Action getIsGenericAction_0() { return cIsGenericAction_0; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'are'
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_2() { return cNoAssignment_2; }
		
		//'not'
		public Keyword getNoNotKeyword_2_0() { return cNoNotKeyword_2_0; }
		
		//'generic'
		public Keyword getGenericKeyword_3() { return cGenericKeyword_3; }
	}
	public class NameOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NameOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cNoAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final Keyword cNoDoesKeyword_1_0_0_0_0 = (Keyword)cNoAssignment_1_0_0_0.eContents().get(0);
		private final Keyword cNotKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorNameOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Assignment cNoAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cNoLessThanSignGreaterThanSignKeyword_1_1_1_0 = (Keyword)cNoAssignment_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringPropertyParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLanguageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLanguageLanguageEnumRuleCall_3_1_0 = (RuleCall)cLanguageAssignment_3_1.eContents().get(0);
		
		//NameOperation:
		//	'name' ((no?='does' 'not')? operator=NameOperator | ('=' | no?='<>')) name=StringProperty (',' Language=Language)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'name' ((no?='does' 'not')? operator=NameOperator | ('=' | no?='<>')) name=StringProperty (',' Language=Language)?
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//((no?='does' 'not')? operator=NameOperator | ('=' | no?='<>'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(no?='does' 'not')? operator=NameOperator
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(no?='does' 'not')?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//no?='does'
		public Assignment getNoAssignment_1_0_0_0() { return cNoAssignment_1_0_0_0; }
		
		//'does'
		public Keyword getNoDoesKeyword_1_0_0_0_0() { return cNoDoesKeyword_1_0_0_0_0; }
		
		//'not'
		public Keyword getNotKeyword_1_0_0_1() { return cNotKeyword_1_0_0_1; }
		
		//operator=NameOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//NameOperator
		public RuleCall getOperatorNameOperatorEnumRuleCall_1_0_1_0() { return cOperatorNameOperatorEnumRuleCall_1_0_1_0; }
		
		//('=' | no?='<>')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//no?='<>'
		public Assignment getNoAssignment_1_1_1() { return cNoAssignment_1_1_1; }
		
		//'<>'
		public Keyword getNoLessThanSignGreaterThanSignKeyword_1_1_1_0() { return cNoLessThanSignGreaterThanSignKeyword_1_1_1_0; }
		
		//name=StringProperty
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringProperty
		public RuleCall getNameStringPropertyParserRuleCall_2_0() { return cNameStringPropertyParserRuleCall_2_0; }
		
		//(',' Language=Language)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//Language=Language
		public Assignment getLanguageAssignment_3_1() { return cLanguageAssignment_3_1; }
		
		//Language
		public RuleCall getLanguageLanguageEnumRuleCall_3_1_0() { return cLanguageLanguageEnumRuleCall_3_1_0; }
	}
	public class NameTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NameType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cNoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNoLessThanSignGreaterThanSignKeyword_2_1_0 = (Keyword)cNoAssignment_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeNameCheckEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//NameType:
		//	'name'
		//	'type' ('=' | no?='<>') type=NameCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//'name' 'type' ('=' | no?='<>') type=NameCheck
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//('=' | no?='<>')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//no?='<>'
		public Assignment getNoAssignment_2_1() { return cNoAssignment_2_1; }
		
		//'<>'
		public Keyword getNoLessThanSignGreaterThanSignKeyword_2_1_0() { return cNoLessThanSignGreaterThanSignKeyword_2_1_0; }
		
		//type=NameCheck
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//NameCheck
		public RuleCall getTypeNameCheckEnumRuleCall_3_0() { return cTypeNameCheckEnumRuleCall_3_0; }
	}
	public class JavaDocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.JavaDoc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaDocAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNoNoKeyword_1_0 = (Keyword)cNoAssignment_1.eContents().get(0);
		private final Keyword cJavaDocKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAuthorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cAuthorAuthorKeyword_3_0 = (Keyword)cAuthorAssignment_3.eContents().get(0);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cParameterParameterKeyword_4_0 = (Keyword)cParameterAssignment_4.eContents().get(0);
		private final Assignment cReturnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cReturnReturnKeyword_5_0 = (Keyword)cReturnAssignment_5.eContents().get(0);
		private final Assignment cVersionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cVersionVersionKeyword_6_0 = (Keyword)cVersionAssignment_6.eContents().get(0);
		private final Assignment cThrowsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cThrowsThrowsKeyword_7_0 = (Keyword)cThrowsAssignment_7.eContents().get(0);
		private final Assignment cSeeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cSeeSeeKeyword_8_0 = (Keyword)cSeeAssignment_8.eContents().get(0);
		
		//JavaDoc:
		//	{JavaDoc} no?='no'?
		//	'JavaDoc'
		//	author?='@author'?
		//	parameter?='@parameter'?
		//	return?='@return'?
		//	version?='@version'?
		//	throws?='@throws'?
		//	see?='@see'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaDoc} no?='no'? 'JavaDoc' author?='@author'? parameter?='@parameter'? return?='@return'? version?='@version'?
		//throws?='@throws'? see?='@see'?
		public Group getGroup() { return cGroup; }
		
		//{JavaDoc}
		public Action getJavaDocAction_0() { return cJavaDocAction_0; }
		
		//no?='no'?
		public Assignment getNoAssignment_1() { return cNoAssignment_1; }
		
		//'no'
		public Keyword getNoNoKeyword_1_0() { return cNoNoKeyword_1_0; }
		
		//'JavaDoc'
		public Keyword getJavaDocKeyword_2() { return cJavaDocKeyword_2; }
		
		//author?='@author'?
		public Assignment getAuthorAssignment_3() { return cAuthorAssignment_3; }
		
		//'@author'
		public Keyword getAuthorAuthorKeyword_3_0() { return cAuthorAuthorKeyword_3_0; }
		
		//parameter?='@parameter'?
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//'@parameter'
		public Keyword getParameterParameterKeyword_4_0() { return cParameterParameterKeyword_4_0; }
		
		//return?='@return'?
		public Assignment getReturnAssignment_5() { return cReturnAssignment_5; }
		
		//'@return'
		public Keyword getReturnReturnKeyword_5_0() { return cReturnReturnKeyword_5_0; }
		
		//version?='@version'?
		public Assignment getVersionAssignment_6() { return cVersionAssignment_6; }
		
		//'@version'
		public Keyword getVersionVersionKeyword_6_0() { return cVersionVersionKeyword_6_0; }
		
		//throws?='@throws'?
		public Assignment getThrowsAssignment_7() { return cThrowsAssignment_7; }
		
		//'@throws'
		public Keyword getThrowsThrowsKeyword_7_0() { return cThrowsThrowsKeyword_7_0; }
		
		//see?='@see'?
		public Assignment getSeeAssignment_8() { return cSeeAssignment_8; }
		
		//'@see'
		public Keyword getSeeSeeKeyword_8_0() { return cSeeSeeKeyword_8_0; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Assignment cNoAssignment_1_0_0_0_0 = (Assignment)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cNoDoKeyword_1_0_0_0_0_0 = (Keyword)cNoAssignment_1_0_0_0_0.eContents().get(0);
		private final Keyword cNotKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cNoAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cNoDonTKeyword_1_0_0_1_0 = (Keyword)cNoAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Assignment cNoAssignment_1_0_0_2_0 = (Assignment)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cNoDoesKeyword_1_0_0_2_0_0 = (Keyword)cNoAssignment_1_0_0_2_0.eContents().get(0);
		private final Keyword cNotKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Assignment cNoAssignment_1_0_0_3 = (Assignment)cAlternatives_1_0_0.eContents().get(3);
		private final Keyword cNoDoesnTKeyword_1_0_0_3_0 = (Keyword)cNoAssignment_1_0_0_3.eContents().get(0);
		private final Keyword cHaveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNoAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cNoHavenTKeyword_1_1_0 = (Keyword)cNoAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Contains:
		//	{Contains} ((no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'have' | no?='haven\'t') '{'
		//	rule=Rule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Contains} ((no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'have' | no?='haven\'t') '{' rule=Rule
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Contains}
		public Action getContainsAction_0() { return cContainsAction_0; }
		
		//((no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'have' | no?='haven\'t')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'have'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')?
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//no?='do' 'not'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//no?='do'
		public Assignment getNoAssignment_1_0_0_0_0() { return cNoAssignment_1_0_0_0_0; }
		
		//'do'
		public Keyword getNoDoKeyword_1_0_0_0_0_0() { return cNoDoKeyword_1_0_0_0_0_0; }
		
		//'not'
		public Keyword getNotKeyword_1_0_0_0_1() { return cNotKeyword_1_0_0_0_1; }
		
		//no?='don\'t'
		public Assignment getNoAssignment_1_0_0_1() { return cNoAssignment_1_0_0_1; }
		
		//'don\'t'
		public Keyword getNoDonTKeyword_1_0_0_1_0() { return cNoDonTKeyword_1_0_0_1_0; }
		
		//no?='does' 'not'
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//no?='does'
		public Assignment getNoAssignment_1_0_0_2_0() { return cNoAssignment_1_0_0_2_0; }
		
		//'does'
		public Keyword getNoDoesKeyword_1_0_0_2_0_0() { return cNoDoesKeyword_1_0_0_2_0_0; }
		
		//'not'
		public Keyword getNotKeyword_1_0_0_2_1() { return cNotKeyword_1_0_0_2_1; }
		
		//no?='doesn\'t'
		public Assignment getNoAssignment_1_0_0_3() { return cNoAssignment_1_0_0_3; }
		
		//'doesn\'t'
		public Keyword getNoDoesnTKeyword_1_0_0_3_0() { return cNoDoesnTKeyword_1_0_0_3_0; }
		
		//'have'
		public Keyword getHaveKeyword_1_0_1() { return cHaveKeyword_1_0_1; }
		
		//no?='haven\'t'
		public Assignment getNoAssignment_1_1() { return cNoAssignment_1_1; }
		
		//'haven\'t'
		public Keyword getNoHavenTKeyword_1_1_0() { return cNoHavenTKeyword_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rule=Rule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//Rule
		public RuleCall getRuleRuleParserRuleCall_3_0() { return cRuleRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Modifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAreKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNoNotKeyword_1_0 = (Keyword)cNoAssignment_1.eContents().get(0);
		private final Keyword cModifiedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlendAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlendBlendModifiersParserRuleCall_5_0 = (RuleCall)cBlendAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOrKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBlendAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBlendBlendModifiersParserRuleCall_6_1_0 = (RuleCall)cBlendAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Modifiers:
		//	('is' | 'are') no?='not'?
		//	'modified' 'with' '[' blend+=BlendModifiers ('or' blend+=BlendModifiers)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//('is' | 'are') no?='not'? 'modified' 'with' '[' blend+=BlendModifiers ('or' blend+=BlendModifiers)* ']'
		public Group getGroup() { return cGroup; }
		
		//('is' | 'are')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'is'
		public Keyword getIsKeyword_0_0() { return cIsKeyword_0_0; }
		
		//'are'
		public Keyword getAreKeyword_0_1() { return cAreKeyword_0_1; }
		
		//no?='not'?
		public Assignment getNoAssignment_1() { return cNoAssignment_1; }
		
		//'not'
		public Keyword getNoNotKeyword_1_0() { return cNoNotKeyword_1_0; }
		
		//'modified'
		public Keyword getModifiedKeyword_2() { return cModifiedKeyword_2; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//blend+=BlendModifiers
		public Assignment getBlendAssignment_5() { return cBlendAssignment_5; }
		
		//BlendModifiers
		public RuleCall getBlendBlendModifiersParserRuleCall_5_0() { return cBlendBlendModifiersParserRuleCall_5_0; }
		
		//('or' blend+=BlendModifiers)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'or'
		public Keyword getOrKeyword_6_0() { return cOrKeyword_6_0; }
		
		//blend+=BlendModifiers
		public Assignment getBlendAssignment_6_1() { return cBlendAssignment_6_1; }
		
		//BlendModifiers
		public RuleCall getBlendBlendModifiersParserRuleCall_6_1_0() { return cBlendBlendModifiersParserRuleCall_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class RangoNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.RangoNames");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangoNamesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMinAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_1_1_0 = (RuleCall)cMinAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cMaxAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cMaxEIntParserRuleCall_1_3_0_0 = (RuleCall)cMaxAssignment_1_3_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_3_1 = (Keyword)cAlternatives_1_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypesStringPropertyParserRuleCall_2_2_0 = (RuleCall)cTypesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cTypesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cTypesStringPropertyParserRuleCall_2_3_1_0 = (RuleCall)cTypesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//RangoNames:
		//	{RangoNames} ('[' min=EInt '..' (max=EInt | '*') ']')? ('types' '{' types+=StringProperty (","
		//	types+=StringProperty)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RangoNames} ('[' min=EInt '..' (max=EInt | '*') ']')? ('types' '{' types+=StringProperty ("," types+=StringProperty)*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{RangoNames}
		public Action getRangoNamesAction_0() { return cRangoNamesAction_0; }
		
		//('[' min=EInt '..' (max=EInt | '*') ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//min=EInt
		public Assignment getMinAssignment_1_1() { return cMinAssignment_1_1; }
		
		//EInt
		public RuleCall getMinEIntParserRuleCall_1_1_0() { return cMinEIntParserRuleCall_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_2() { return cFullStopFullStopKeyword_1_2; }
		
		//(max=EInt | '*')
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//max=EInt
		public Assignment getMaxAssignment_1_3_0() { return cMaxAssignment_1_3_0; }
		
		//EInt
		public RuleCall getMaxEIntParserRuleCall_1_3_0_0() { return cMaxEIntParserRuleCall_1_3_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_3_1() { return cAsteriskKeyword_1_3_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//('types' '{' types+=StringProperty ("," types+=StringProperty)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'types'
		public Keyword getTypesKeyword_2_0() { return cTypesKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//types+=StringProperty
		public Assignment getTypesAssignment_2_2() { return cTypesAssignment_2_2; }
		
		//StringProperty
		public RuleCall getTypesStringPropertyParserRuleCall_2_2_0() { return cTypesStringPropertyParserRuleCall_2_2_0; }
		
		//("," types+=StringProperty)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//types+=StringProperty
		public Assignment getTypesAssignment_2_3_1() { return cTypesAssignment_2_3_1; }
		
		//StringProperty
		public RuleCall getTypesStringPropertyParserRuleCall_2_3_1_0() { return cTypesStringPropertyParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class StringPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.StringProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringProperty:
		//	StringValue | StringVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | StringVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//StringVariable
		public RuleCall getStringVariableParserRuleCall_1() { return cStringVariableParserRuleCall_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class StringVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.StringVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableSubtypeParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringsElementStringEnumRuleCall_2_0 = (RuleCall)cStringsAssignment_2.eContents().get(0);
		
		//StringVariable:
		//	variable=VariableSubtype '.' strings=ElementString;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=VariableSubtype '.' strings=ElementString
		public Group getGroup() { return cGroup; }
		
		//variable=VariableSubtype
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//VariableSubtype
		public RuleCall getVariableVariableSubtypeParserRuleCall_0_0() { return cVariableVariableSubtypeParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//strings=ElementString
		public Assignment getStringsAssignment_2() { return cStringsAssignment_2; }
		
		//ElementString
		public RuleCall getStringsElementStringEnumRuleCall_2_0() { return cStringsElementStringEnumRuleCall_2_0; }
	}
	public class VariableSubtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.VariableSubtype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubtypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubtypeElementEnumRuleCall_1_1_0 = (RuleCall)cSubtypeAssignment_1_1.eContents().get(0);
		
		//VariableSubtype:
		//	variable=[Variable|EString] ('.' subtype=Element)?;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable|EString] ('.' subtype=Element)?
		public Group getGroup() { return cGroup; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_0_0_1() { return cVariableVariableEStringParserRuleCall_0_0_1; }
		
		//('.' subtype=Element)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//subtype=Element
		public Assignment getSubtypeAssignment_1_1() { return cSubtypeAssignment_1_1; }
		
		//Element
		public RuleCall getSubtypeElementEnumRuleCall_1_1_0() { return cSubtypeElementEnumRuleCall_1_1_0; }
	}
	public class TypePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.TypeProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsPrimitiveFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsCollectionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypePrimitiveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeProperty:
		//	StringProperty | isPrimitiveFunction | IsCollectionType | TypePrimitive;
		@Override public ParserRule getRule() { return rule; }
		
		//StringProperty | isPrimitiveFunction | IsCollectionType | TypePrimitive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringProperty
		public RuleCall getStringPropertyParserRuleCall_0() { return cStringPropertyParserRuleCall_0; }
		
		//isPrimitiveFunction
		public RuleCall getIsPrimitiveFunctionParserRuleCall_1() { return cIsPrimitiveFunctionParserRuleCall_1; }
		
		//IsCollectionType
		public RuleCall getIsCollectionTypeParserRuleCall_2() { return cIsCollectionTypeParserRuleCall_2; }
		
		//TypePrimitive
		public RuleCall getTypePrimitiveParserRuleCall_3() { return cTypePrimitiveParserRuleCall_3; }
	}
	public class TypePrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.TypePrimitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypePrimitiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePrimitivePrimitiveEnumRuleCall_1_0 = (RuleCall)cTypePrimitiveAssignment_1.eContents().get(0);
		
		//TypePrimitive:
		//	'Primitive.' typePrimitive=Primitive;
		@Override public ParserRule getRule() { return rule; }
		
		//'Primitive.' typePrimitive=Primitive
		public Group getGroup() { return cGroup; }
		
		//'Primitive.'
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }
		
		//typePrimitive=Primitive
		public Assignment getTypePrimitiveAssignment_1() { return cTypePrimitiveAssignment_1; }
		
		//Primitive
		public RuleCall getTypePrimitivePrimitiveEnumRuleCall_1_0() { return cTypePrimitivePrimitiveEnumRuleCall_1_0; }
	}
	public class IsPrimitiveFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.isPrimitiveFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsPrimitiveFuntionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsPrimitiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//isPrimitiveFunction IsPrimitiveFuntion:
		//	{IsPrimitiveFuntion}
		//	'isPrimitive' '()'
		@Override public ParserRule getRule() { return rule; }
		
		//{IsPrimitiveFuntion} 'isPrimitive' '()'
		public Group getGroup() { return cGroup; }
		
		//{IsPrimitiveFuntion}
		public Action getIsPrimitiveFuntionAction_0() { return cIsPrimitiveFuntionAction_0; }
		
		//'isPrimitive'
		public Keyword getIsPrimitiveKeyword_1() { return cIsPrimitiveKeyword_1; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }
	}
	public class IsCollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsCollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsCollectionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsCollectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOfAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOfTypePropertyParserRuleCall_2_1_1_0 = (RuleCall)cOfAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//IsCollectionType:
		//	{IsCollectionType}
		//	'isCollection' ('()' | '(' of=TypeProperty ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{IsCollectionType} 'isCollection' ('()' | '(' of=TypeProperty ')')
		public Group getGroup() { return cGroup; }
		
		//{IsCollectionType}
		public Action getIsCollectionTypeAction_0() { return cIsCollectionTypeAction_0; }
		
		//'isCollection'
		public Keyword getIsCollectionKeyword_1() { return cIsCollectionKeyword_1; }
		
		//('()' | '(' of=TypeProperty ')')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_0() { return cLeftParenthesisRightParenthesisKeyword_2_0; }
		
		//'(' of=TypeProperty ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//of=TypeProperty
		public Assignment getOfAssignment_2_1_1() { return cOfAssignment_2_1_1; }
		
		//TypeProperty
		public RuleCall getOfTypePropertyParserRuleCall_2_1_1_0() { return cOfTypePropertyParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class BlendModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.BlendModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAccessAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAccessAccessModifierEnumRuleCall_0_0_0 = (RuleCall)cAccessAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAndKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cStaticAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Keyword cStaticStaticKeyword_0_1_1_0 = (Keyword)cStaticAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAndKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cFinalAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final Keyword cFinalFinalKeyword_0_2_1_0 = (Keyword)cFinalAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cAndKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cAbstractAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_0_3_1_0 = (Keyword)cAbstractAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cAndKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cDefaultAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_0_4_1_0 = (Keyword)cDefaultAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cAndKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cSynchronizedAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_0_5_1_0 = (Keyword)cSynchronizedAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFinalAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_1_1_0 = (Keyword)cFinalAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAbstractAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_2_1_0 = (Keyword)cAbstractAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cAndKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cDefaultAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_3_1_0 = (Keyword)cDefaultAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cAndKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cSynchronizedAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_1_4_1_0 = (Keyword)cSynchronizedAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFinalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cFinalFinalKeyword_2_0_0 = (Keyword)cFinalAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cAndKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAbstractAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_2_1_1_0 = (Keyword)cAbstractAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cAndKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDefaultAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_2_2_1_0 = (Keyword)cDefaultAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cAndKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cSynchronizedAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_2_3_1_0 = (Keyword)cSynchronizedAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cAbstractAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_3_0_0 = (Keyword)cAbstractAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cAndKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDefaultAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_3_1_1_0 = (Keyword)cDefaultAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cAndKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSynchronizedAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_3_2_1_0 = (Keyword)cSynchronizedAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cDefaultAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_4_0_0 = (Keyword)cDefaultAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cAndKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSynchronizedAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_4_1_1_0 = (Keyword)cSynchronizedAssignment_4_1_1.eContents().get(0);
		private final Assignment cSynchronizedAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cSynchronizedSynchronizedKeyword_5_0 = (Keyword)cSynchronizedAssignment_5.eContents().get(0);
		
		//BlendModifiers:
		//	access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//	default?='default')? ('and' synchronized?='synchronized')? | static?='static' ('and' final?='final')? ('and'
		//	abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')? | final?='final' ('and'
		//	abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')? | abstract?='abstract'
		//	('and' default?='default')? ('and' synchronized?='synchronized')? | default?='default' ('and'
		//	synchronized?='synchronized')? | synchronized?='synchronized';
		@Override public ParserRule getRule() { return rule; }
		
		//access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//default?='default')? ('and' synchronized?='synchronized')? | static?='static' ('and' final?='final')? ('and'
		//abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')? | final?='final' ('and'
		//abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')? | abstract?='abstract' ('and'
		//default?='default')? ('and' synchronized?='synchronized')? | default?='default' ('and' synchronized?='synchronized')?
		//| synchronized?='synchronized'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//default?='default')? ('and' synchronized?='synchronized')?
		public Group getGroup_0() { return cGroup_0; }
		
		//access=AccessModifier
		public Assignment getAccessAssignment_0_0() { return cAccessAssignment_0_0; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_0_0_0() { return cAccessAccessModifierEnumRuleCall_0_0_0; }
		
		//('and' static?='static')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'and'
		public Keyword getAndKeyword_0_1_0() { return cAndKeyword_0_1_0; }
		
		//static?='static'
		public Assignment getStaticAssignment_0_1_1() { return cStaticAssignment_0_1_1; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_1_1_0() { return cStaticStaticKeyword_0_1_1_0; }
		
		//('and' final?='final')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'and'
		public Keyword getAndKeyword_0_2_0() { return cAndKeyword_0_2_0; }
		
		//final?='final'
		public Assignment getFinalAssignment_0_2_1() { return cFinalAssignment_0_2_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_0_2_1_0() { return cFinalFinalKeyword_0_2_1_0; }
		
		//('and' abstract?='abstract')?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'and'
		public Keyword getAndKeyword_0_3_0() { return cAndKeyword_0_3_0; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_0_3_1() { return cAbstractAssignment_0_3_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_3_1_0() { return cAbstractAbstractKeyword_0_3_1_0; }
		
		//('and' default?='default')?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'and'
		public Keyword getAndKeyword_0_4_0() { return cAndKeyword_0_4_0; }
		
		//default?='default'
		public Assignment getDefaultAssignment_0_4_1() { return cDefaultAssignment_0_4_1; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_0_4_1_0() { return cDefaultDefaultKeyword_0_4_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'and'
		public Keyword getAndKeyword_0_5_0() { return cAndKeyword_0_5_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_0_5_1() { return cSynchronizedAssignment_0_5_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_0_5_1_0() { return cSynchronizedSynchronizedKeyword_0_5_1_0; }
		
		//static?='static' ('and' final?='final')? ('and' abstract?='abstract')? ('and' default?='default')? ('and'
		//synchronized?='synchronized')?
		public Group getGroup_1() { return cGroup_1; }
		
		//static?='static'
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }
		
		//('and' final?='final')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'and'
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }
		
		//final?='final'
		public Assignment getFinalAssignment_1_1_1() { return cFinalAssignment_1_1_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_1_1_0() { return cFinalFinalKeyword_1_1_1_0; }
		
		//('and' abstract?='abstract')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_1_2_1() { return cAbstractAssignment_1_2_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_2_1_0() { return cAbstractAbstractKeyword_1_2_1_0; }
		
		//('and' default?='default')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'and'
		public Keyword getAndKeyword_1_3_0() { return cAndKeyword_1_3_0; }
		
		//default?='default'
		public Assignment getDefaultAssignment_1_3_1() { return cDefaultAssignment_1_3_1; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_1_3_1_0() { return cDefaultDefaultKeyword_1_3_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'and'
		public Keyword getAndKeyword_1_4_0() { return cAndKeyword_1_4_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_1_4_1() { return cSynchronizedAssignment_1_4_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_1_4_1_0() { return cSynchronizedSynchronizedKeyword_1_4_1_0; }
		
		//final?='final' ('and' abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')?
		public Group getGroup_2() { return cGroup_2; }
		
		//final?='final'
		public Assignment getFinalAssignment_2_0() { return cFinalAssignment_2_0; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0_0() { return cFinalFinalKeyword_2_0_0; }
		
		//('and' abstract?='abstract')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'and'
		public Keyword getAndKeyword_2_1_0() { return cAndKeyword_2_1_0; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_2_1_1() { return cAbstractAssignment_2_1_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_2_1_1_0() { return cAbstractAbstractKeyword_2_1_1_0; }
		
		//('and' default?='default')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'and'
		public Keyword getAndKeyword_2_2_0() { return cAndKeyword_2_2_0; }
		
		//default?='default'
		public Assignment getDefaultAssignment_2_2_1() { return cDefaultAssignment_2_2_1; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_2_2_1_0() { return cDefaultDefaultKeyword_2_2_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'and'
		public Keyword getAndKeyword_2_3_0() { return cAndKeyword_2_3_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_2_3_1() { return cSynchronizedAssignment_2_3_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_2_3_1_0() { return cSynchronizedSynchronizedKeyword_2_3_1_0; }
		
		//abstract?='abstract' ('and' default?='default')? ('and' synchronized?='synchronized')?
		public Group getGroup_3() { return cGroup_3; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_3_0() { return cAbstractAssignment_3_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_3_0_0() { return cAbstractAbstractKeyword_3_0_0; }
		
		//('and' default?='default')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'and'
		public Keyword getAndKeyword_3_1_0() { return cAndKeyword_3_1_0; }
		
		//default?='default'
		public Assignment getDefaultAssignment_3_1_1() { return cDefaultAssignment_3_1_1; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_3_1_1_0() { return cDefaultDefaultKeyword_3_1_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'and'
		public Keyword getAndKeyword_3_2_0() { return cAndKeyword_3_2_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_3_2_1() { return cSynchronizedAssignment_3_2_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_3_2_1_0() { return cSynchronizedSynchronizedKeyword_3_2_1_0; }
		
		//default?='default' ('and' synchronized?='synchronized')?
		public Group getGroup_4() { return cGroup_4; }
		
		//default?='default'
		public Assignment getDefaultAssignment_4_0() { return cDefaultAssignment_4_0; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_4_0_0() { return cDefaultDefaultKeyword_4_0_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'and'
		public Keyword getAndKeyword_4_1_0() { return cAndKeyword_4_1_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_4_1_1() { return cSynchronizedAssignment_4_1_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_4_1_1_0() { return cSynchronizedSynchronizedKeyword_4_1_1_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_5() { return cSynchronizedAssignment_5; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_5_0() { return cSynchronizedSynchronizedKeyword_5_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class ElementElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPackagePackageKeyword_0_0 = (Keyword)cPackageEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cClassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cClassClassKeyword_1_0 = (Keyword)cClassEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInterfaceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInterfaceInterfaceKeyword_2_0 = (Keyword)cInterfaceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEnumerationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEnumerationEnumerationKeyword_3_0 = (Keyword)cEnumerationEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMethodEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMethodMethodKeyword_4_0 = (Keyword)cMethodEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAttributeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAttributeAttributeKeyword_5_0 = (Keyword)cAttributeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFileEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFileFileKeyword_6_0 = (Keyword)cFileEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Element:
		//	Package | Class | Interface | Enumeration | Method | Attribute | File;
		public EnumRule getRule() { return rule; }
		
		//Package | Class | Interface | Enumeration | Method | Attribute | File
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_0() { return cPackageEnumLiteralDeclaration_0; }
		
		//'Package'
		public Keyword getPackagePackageKeyword_0_0() { return cPackagePackageKeyword_0_0; }
		
		//Class
		public EnumLiteralDeclaration getClassEnumLiteralDeclaration_1() { return cClassEnumLiteralDeclaration_1; }
		
		//'Class'
		public Keyword getClassClassKeyword_1_0() { return cClassClassKeyword_1_0; }
		
		//Interface
		public EnumLiteralDeclaration getInterfaceEnumLiteralDeclaration_2() { return cInterfaceEnumLiteralDeclaration_2; }
		
		//'Interface'
		public Keyword getInterfaceInterfaceKeyword_2_0() { return cInterfaceInterfaceKeyword_2_0; }
		
		//Enumeration
		public EnumLiteralDeclaration getEnumerationEnumLiteralDeclaration_3() { return cEnumerationEnumLiteralDeclaration_3; }
		
		//'Enumeration'
		public Keyword getEnumerationEnumerationKeyword_3_0() { return cEnumerationEnumerationKeyword_3_0; }
		
		//Method
		public EnumLiteralDeclaration getMethodEnumLiteralDeclaration_4() { return cMethodEnumLiteralDeclaration_4; }
		
		//'Method'
		public Keyword getMethodMethodKeyword_4_0() { return cMethodMethodKeyword_4_0; }
		
		//Attribute
		public EnumLiteralDeclaration getAttributeEnumLiteralDeclaration_5() { return cAttributeEnumLiteralDeclaration_5; }
		
		//'Attribute'
		public Keyword getAttributeAttributeKeyword_5_0() { return cAttributeAttributeKeyword_5_0; }
		
		//File
		public EnumLiteralDeclaration getFileEnumLiteralDeclaration_6() { return cFileEnumLiteralDeclaration_6; }
		
		//'File'
		public Keyword getFileFileKeyword_6_0() { return cFileFileKeyword_6_0; }
	}
	public class PrimitiveElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBooleanKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBYTEByteKeyword_1_0 = (Keyword)cBYTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHARCharKeyword_2_0 = (Keyword)cCHAREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOUBLEDoubleKeyword_3_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINTIntKeyword_5_0 = (Keyword)cINTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLONGLongKeyword_6_0 = (Keyword)cLONGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSHORTShortKeyword_7_0 = (Keyword)cSHORTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSTRINGStringKeyword_8_0 = (Keyword)cSTRINGEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Primitive:
		//	BOOLEAN='boolean' | BYTE='byte' | CHAR='char' | DOUBLE='double' | FLOAT='float'
		//	| INT='int' | LONG='long' | SHORT='short' | STRING='String';
		public EnumRule getRule() { return rule; }
		
		//BOOLEAN='boolean' | BYTE='byte' | CHAR='char' | DOUBLE='double' | FLOAT='float' | INT='int' | LONG='long' |
		//SHORT='short' | STRING='String'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_0_0() { return cBOOLEANBooleanKeyword_0_0; }
		
		//BYTE='byte'
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_1() { return cBYTEEnumLiteralDeclaration_1; }
		
		//'byte'
		public Keyword getBYTEByteKeyword_1_0() { return cBYTEByteKeyword_1_0; }
		
		//CHAR='char'
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_2() { return cCHAREnumLiteralDeclaration_2; }
		
		//'char'
		public Keyword getCHARCharKeyword_2_0() { return cCHARCharKeyword_2_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_3() { return cDOUBLEEnumLiteralDeclaration_3; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_3_0() { return cDOUBLEDoubleKeyword_3_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_5() { return cINTEnumLiteralDeclaration_5; }
		
		//'int'
		public Keyword getINTIntKeyword_5_0() { return cINTIntKeyword_5_0; }
		
		//LONG='long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_6() { return cLONGEnumLiteralDeclaration_6; }
		
		//'long'
		public Keyword getLONGLongKeyword_6_0() { return cLONGLongKeyword_6_0; }
		
		//SHORT='short'
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_7() { return cSHORTEnumLiteralDeclaration_7; }
		
		//'short'
		public Keyword getSHORTShortKeyword_7_0() { return cSHORTShortKeyword_7_0; }
		
		//STRING='String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_8() { return cSTRINGEnumLiteralDeclaration_8; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_8_0() { return cSTRINGStringKeyword_8_0; }
	}
	public class NameOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NameOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTARTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTARTStartKeyword_0_0 = (Keyword)cSTARTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENDEndKeyword_1_0 = (Keyword)cENDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONTAINContainKeyword_2_0 = (Keyword)cCONTAINEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLIKEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLIKELikeKeyword_3_0 = (Keyword)cLIKEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum NameOperator:
		//	START='start ' | END='end' | CONTAIN='contain' | LIKE='like';
		public EnumRule getRule() { return rule; }
		
		//START='start ' | END='end' | CONTAIN='contain' | LIKE='like'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//START='start '
		public EnumLiteralDeclaration getSTARTEnumLiteralDeclaration_0() { return cSTARTEnumLiteralDeclaration_0; }
		
		//'start '
		public Keyword getSTARTStartKeyword_0_0() { return cSTARTStartKeyword_0_0; }
		
		//END='end'
		public EnumLiteralDeclaration getENDEnumLiteralDeclaration_1() { return cENDEnumLiteralDeclaration_1; }
		
		//'end'
		public Keyword getENDEndKeyword_1_0() { return cENDEndKeyword_1_0; }
		
		//CONTAIN='contain'
		public EnumLiteralDeclaration getCONTAINEnumLiteralDeclaration_2() { return cCONTAINEnumLiteralDeclaration_2; }
		
		//'contain'
		public Keyword getCONTAINContainKeyword_2_0() { return cCONTAINContainKeyword_2_0; }
		
		//LIKE='like'
		public EnumLiteralDeclaration getLIKEEnumLiteralDeclaration_3() { return cLIKEEnumLiteralDeclaration_3; }
		
		//'like'
		public Keyword getLIKELikeKeyword_3_0() { return cLIKELikeKeyword_3_0; }
	}
	public class ElementStringElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.ElementString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNameNameKeyword_0_0 = (Keyword)cNameEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTypeTypeKeyword_1_0 = (Keyword)cTypeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ElementString:
		//	name | type;
		public EnumRule getRule() { return rule; }
		
		//name | type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name
		public EnumLiteralDeclaration getNameEnumLiteralDeclaration_0() { return cNameEnumLiteralDeclaration_0; }
		
		//'name'
		public Keyword getNameNameKeyword_0_0() { return cNameNameKeyword_0_0; }
		
		//type
		public EnumLiteralDeclaration getTypeEnumLiteralDeclaration_1() { return cTypeEnumLiteralDeclaration_1; }
		
		//'type'
		public Keyword getTypeTypeKeyword_1_0() { return cTypeTypeKeyword_1_0; }
	}
	public class LanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSPANISHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSPANISHSpanishKeyword_0_0 = (Keyword)cSPANISHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENGLISHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENGLISHEnglishKeyword_1_0 = (Keyword)cENGLISHEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Language:
		//	SPANISH='Spanish' | ENGLISH='English';
		public EnumRule getRule() { return rule; }
		
		//SPANISH='Spanish' | ENGLISH='English'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPANISH='Spanish'
		public EnumLiteralDeclaration getSPANISHEnumLiteralDeclaration_0() { return cSPANISHEnumLiteralDeclaration_0; }
		
		//'Spanish'
		public Keyword getSPANISHSpanishKeyword_0_0() { return cSPANISHSpanishKeyword_0_0; }
		
		//ENGLISH='English'
		public EnumLiteralDeclaration getENGLISHEnumLiteralDeclaration_1() { return cENGLISHEnumLiteralDeclaration_1; }
		
		//'English'
		public Keyword getENGLISHEnglishKeyword_1_0() { return cENGLISHEnglishKeyword_1_0; }
	}
	public class NameCheckElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NameCheck");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUPPER_CASEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUPPER_CASEUpperCaseKeyword_0_0 = (Keyword)cUPPER_CASEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWER_CASEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWER_CASELowerCaseKeyword_1_0 = (Keyword)cLOWER_CASEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUPPER_CAMEL_CASEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUPPER_CAMEL_CASEUpperCamelCaseKeyword_2_0 = (Keyword)cUPPER_CAMEL_CASEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOWER_CAMEL_CASEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOWER_CAMEL_CASELowerCamelCaseKeyword_3_0 = (Keyword)cLOWER_CAMEL_CASEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTART_UPPER_CASEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTART_UPPER_CASEStartUpperCaseKeyword_4_0 = (Keyword)cSTART_UPPER_CASEEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum NameCheck:
		//	UPPER_CASE='upper case' | LOWER_CASE='lower case' | UPPER_CAMEL_CASE='upper camel case' |
		//	LOWER_CAMEL_CASE='lower camel case' | START_UPPER_CASE='start upper case';
		public EnumRule getRule() { return rule; }
		
		//UPPER_CASE='upper case' | LOWER_CASE='lower case' | UPPER_CAMEL_CASE='upper camel case' |
		//LOWER_CAMEL_CASE='lower camel case' | START_UPPER_CASE='start upper case'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UPPER_CASE='upper case'
		public EnumLiteralDeclaration getUPPER_CASEEnumLiteralDeclaration_0() { return cUPPER_CASEEnumLiteralDeclaration_0; }
		
		//'upper case'
		public Keyword getUPPER_CASEUpperCaseKeyword_0_0() { return cUPPER_CASEUpperCaseKeyword_0_0; }
		
		//LOWER_CASE='lower case'
		public EnumLiteralDeclaration getLOWER_CASEEnumLiteralDeclaration_1() { return cLOWER_CASEEnumLiteralDeclaration_1; }
		
		//'lower case'
		public Keyword getLOWER_CASELowerCaseKeyword_1_0() { return cLOWER_CASELowerCaseKeyword_1_0; }
		
		//UPPER_CAMEL_CASE='upper camel case'
		public EnumLiteralDeclaration getUPPER_CAMEL_CASEEnumLiteralDeclaration_2() { return cUPPER_CAMEL_CASEEnumLiteralDeclaration_2; }
		
		//'upper camel case'
		public Keyword getUPPER_CAMEL_CASEUpperCamelCaseKeyword_2_0() { return cUPPER_CAMEL_CASEUpperCamelCaseKeyword_2_0; }
		
		//LOWER_CAMEL_CASE='lower camel case'
		public EnumLiteralDeclaration getLOWER_CAMEL_CASEEnumLiteralDeclaration_3() { return cLOWER_CAMEL_CASEEnumLiteralDeclaration_3; }
		
		//'lower camel case'
		public Keyword getLOWER_CAMEL_CASELowerCamelCaseKeyword_3_0() { return cLOWER_CAMEL_CASELowerCamelCaseKeyword_3_0; }
		
		//START_UPPER_CASE='start upper case'
		public EnumLiteralDeclaration getSTART_UPPER_CASEEnumLiteralDeclaration_4() { return cSTART_UPPER_CASEEnumLiteralDeclaration_4; }
		
		//'start upper case'
		public Keyword getSTART_UPPER_CASEStartUpperCaseKeyword_4_0() { return cSTART_UPPER_CASEStartUpperCaseKeyword_4_0; }
	}
	public class AccessModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.AccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cProtectedProtectedKeyword_1_0 = (Keyword)cProtectedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrivatePrivateKeyword_2_0 = (Keyword)cPrivateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AccessModifier:
		//	public | protected | private;
		public EnumRule getRule() { return rule; }
		
		//public | protected | private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_1() { return cProtectedEnumLiteralDeclaration_1; }
		
		//'protected'
		public Keyword getProtectedProtectedKeyword_1_0() { return cProtectedProtectedKeyword_1_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_2() { return cPrivateEnumLiteralDeclaration_2; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_2_0() { return cPrivatePrivateKeyword_2_0; }
	}
	public class QuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExistsExistsKeyword_1_0 = (Keyword)cExistsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAllAllKeyword_2_0 = (Keyword)cAllEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Quantifier:
		//	one | exists | all;
		public EnumRule getRule() { return rule; }
		
		//one | exists | all
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//one
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//'one'
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//exists
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_1() { return cExistsEnumLiteralDeclaration_1; }
		
		//'exists'
		public Keyword getExistsExistsKeyword_1_0() { return cExistsExistsKeyword_1_0; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_2() { return cAllEnumLiteralDeclaration_2; }
		
		//'all'
		public Keyword getAllAllKeyword_2_0() { return cAllAllKeyword_2_0; }
	}
	
	private final RuleSetElements pRuleSet;
	private final SentenceElements pSentence;
	private final ElementElements eElement;
	private final VariableElements pVariable;
	private final RuleElements pRule;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PrimaryOpElements pPrimaryOp;
	private final PropertyLiteralElements pPropertyLiteral;
	private final PropertyElements pProperty;
	private final IsImplementedElements pIsImplemented;
	private final IsSuperInterfaceElements pIsSuperInterface;
	private final IsSuperClassElements pIsSuperClass;
	private final IsSubClassElements pIsSubClass;
	private final ImplementsElements pImplements;
	private final ExtendsElements pExtends;
	private final TamanioElements pTamanio;
	private final ParameterElements pParameter;
	private final ConstructorElements pConstructor;
	private final ReturnElements pReturn;
	private final AttributeTypeElements pAttributeType;
	private final InitializeElements pInitialize;
	private final EmptyElements pEmpty;
	private final IsGenericElements pIsGeneric;
	private final NameOperationElements pNameOperation;
	private final NameTypeElements pNameType;
	private final JavaDocElements pJavaDoc;
	private final ContainsElements pContains;
	private final ModifiersElements pModifiers;
	private final EBooleanElements pEBoolean;
	private final RangoNamesElements pRangoNames;
	private final StringPropertyElements pStringProperty;
	private final StringValueElements pStringValue;
	private final StringVariableElements pStringVariable;
	private final VariableSubtypeElements pVariableSubtype;
	private final TypePropertyElements pTypeProperty;
	private final TypePrimitiveElements pTypePrimitive;
	private final IsPrimitiveFunctionElements pIsPrimitiveFunction;
	private final PrimitiveElements ePrimitive;
	private final IsCollectionTypeElements pIsCollectionType;
	private final EIntElements pEInt;
	private final NameOperatorElements eNameOperator;
	private final ElementStringElements eElementString;
	private final LanguageElements eLanguage;
	private final NameCheckElements eNameCheck;
	private final BlendModifiersElements pBlendModifiers;
	private final AccessModifierElements eAccessModifier;
	private final QuantifierElements eQuantifier;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JRulesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleSet = new RuleSetElements();
		this.pSentence = new SentenceElements();
		this.eElement = new ElementElements();
		this.pVariable = new VariableElements();
		this.pRule = new RuleElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPrimaryOp = new PrimaryOpElements();
		this.pPropertyLiteral = new PropertyLiteralElements();
		this.pProperty = new PropertyElements();
		this.pIsImplemented = new IsImplementedElements();
		this.pIsSuperInterface = new IsSuperInterfaceElements();
		this.pIsSuperClass = new IsSuperClassElements();
		this.pIsSubClass = new IsSubClassElements();
		this.pImplements = new ImplementsElements();
		this.pExtends = new ExtendsElements();
		this.pTamanio = new TamanioElements();
		this.pParameter = new ParameterElements();
		this.pConstructor = new ConstructorElements();
		this.pReturn = new ReturnElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pInitialize = new InitializeElements();
		this.pEmpty = new EmptyElements();
		this.pIsGeneric = new IsGenericElements();
		this.pNameOperation = new NameOperationElements();
		this.pNameType = new NameTypeElements();
		this.pJavaDoc = new JavaDocElements();
		this.pContains = new ContainsElements();
		this.pModifiers = new ModifiersElements();
		this.pEBoolean = new EBooleanElements();
		this.pRangoNames = new RangoNamesElements();
		this.pStringProperty = new StringPropertyElements();
		this.pStringValue = new StringValueElements();
		this.pStringVariable = new StringVariableElements();
		this.pVariableSubtype = new VariableSubtypeElements();
		this.pTypeProperty = new TypePropertyElements();
		this.pTypePrimitive = new TypePrimitiveElements();
		this.pIsPrimitiveFunction = new IsPrimitiveFunctionElements();
		this.ePrimitive = new PrimitiveElements();
		this.pIsCollectionType = new IsCollectionTypeElements();
		this.pEInt = new EIntElements();
		this.eNameOperator = new NameOperatorElements();
		this.eElementString = new ElementStringElements();
		this.eLanguage = new LanguageElements();
		this.eNameCheck = new NameCheckElements();
		this.pBlendModifiers = new BlendModifiersElements();
		this.eAccessModifier = new AccessModifierElements();
		this.eQuantifier = new QuantifierElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.uam.sara.tfg.dsl.JRules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleSet:
	//	'Projects' 'Name:' (ProjectName+=EString ("," ProjectName+=EString)* | '*') sentences+=Sentence sentences+=Sentence*;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//Sentence:
	//	(Variable | Rule) ';';
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//enum Element:
	//	Package | Class | Interface | Enumeration | Method | Attribute | File;
	public ElementElements getElementAccess() {
		return eElement;
	}
	
	public EnumRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Variable:
	//	name=EString ':'
	//	element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString] (',' in+=[Variable|EString])*)?
	//	('using' using+=VariableSubtype (',' using+=VariableSubtype)*)? ('satisfy' satisfy=Or)?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Rule:
	//	no?='no'? quantifier=Quantifier element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString] (','
	//	in+=[Variable|EString])*)? ('using' using+=VariableSubtype (',' using+=VariableSubtype)*)? ('which' filter=Or)?
	//	('satisfy' satisfy=Or)?;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Or:
	//	op+=And ('or' op+=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And:
	//	op+=PrimaryOp ('and' op+=PrimaryOp)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//PrimaryOp:
	//	'(' Or ')' | PropertyLiteral;
	public PrimaryOpElements getPrimaryOpAccess() {
		return pPrimaryOp;
	}
	
	public ParserRule getPrimaryOpRule() {
		return getPrimaryOpAccess().getRule();
	}
	
	//PropertyLiteral:
	//	property=Property;
	public PropertyLiteralElements getPropertyLiteralAccess() {
		return pPropertyLiteral;
	}
	
	public ParserRule getPropertyLiteralRule() {
		return getPropertyLiteralAccess().getRule();
	}
	
	//Property:
	//	IsImplemented | IsSuperInterface | IsSuperClass | IsSubClass | Implements | Extends | Tamanio | Parameter |
	//	Constructor | Return | AttributeType | Initialize | Empty | IsGeneric | NameOperation | NameType | Contains | JavaDoc
	//	| Modifiers;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//IsImplemented:
	//	('is' | 'are') no?='not'? 'implemented' valores=RangoNames;
	public IsImplementedElements getIsImplementedAccess() {
		return pIsImplemented;
	}
	
	public ParserRule getIsImplementedRule() {
		return getIsImplementedAccess().getRule();
	}
	
	//IsSuperInterface:
	//	('is' | 'are') no?='not'? 'superinterface' valores=RangoNames;
	public IsSuperInterfaceElements getIsSuperInterfaceAccess() {
		return pIsSuperInterface;
	}
	
	public ParserRule getIsSuperInterfaceRule() {
		return getIsSuperInterfaceAccess().getRule();
	}
	
	//IsSuperClass:
	//	('is' | 'are') no?='not'? 'superclass' valores=RangoNames;
	public IsSuperClassElements getIsSuperClassAccess() {
		return pIsSuperClass;
	}
	
	public ParserRule getIsSuperClassRule() {
		return getIsSuperClassAccess().getRule();
	}
	
	//IsSubClass:
	//	{IsSubClass} ('is' | 'are') no?='not'? 'subclass' ('of' of=StringProperty)?;
	public IsSubClassElements getIsSubClassAccess() {
		return pIsSubClass;
	}
	
	public ParserRule getIsSubClassRule() {
		return getIsSubClassAccess().getRule();
	}
	
	//Implements:
	//	(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'implements' valores=RangoNames;
	public ImplementsElements getImplementsAccess() {
		return pImplements;
	}
	
	public ParserRule getImplementsRule() {
		return getImplementsAccess().getRule();
	}
	
	//Extends:
	//	(no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'extends' valores=RangoNames;
	public ExtendsElements getExtendsAccess() {
		return pExtends;
	}
	
	public ParserRule getExtendsRule() {
		return getExtendsAccess().getRule();
	}
	
	//Tamanio:
	//	'size' (('=' | no?='<>') exact=EInt | '[' min=EInt '..' (max=EInt | '*') ']');
	public TamanioElements getTamanioAccess() {
		return pTamanio;
	}
	
	public ParserRule getTamanioRule() {
		return getTamanioAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter}
	//	'parameters' ('size' (('=' | no?='<>') exact=EInt) | '[' min=EInt '..' (max=EInt | '*') ']')? ('types' '=' '['
	//	types+=TypeProperty (',' types+=TypeProperty)* ']')?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Constructor:
	//	{Constructor} ('is' | 'are') no?='not'? 'constructor';
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Return:
	//	'return' 'type' ('=' | no?='<>') type=TypeProperty;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//AttributeType:
	//	'type' ('=' | no?='<>') type=TypeProperty;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//Initialize:
	//	{Initialize} ('is' | 'are') no?='not'? 'initialize';
	public InitializeElements getInitializeAccess() {
		return pInitialize;
	}
	
	public ParserRule getInitializeRule() {
		return getInitializeAccess().getRule();
	}
	
	//Empty:
	//	{Empty} ('is' | 'are') no?='not'? 'empty';
	public EmptyElements getEmptyAccess() {
		return pEmpty;
	}
	
	public ParserRule getEmptyRule() {
		return getEmptyAccess().getRule();
	}
	
	//IsGeneric:
	//	{IsGeneric} ('is' | 'are') no?='not'? 'generic';
	public IsGenericElements getIsGenericAccess() {
		return pIsGeneric;
	}
	
	public ParserRule getIsGenericRule() {
		return getIsGenericAccess().getRule();
	}
	
	//NameOperation:
	//	'name' ((no?='does' 'not')? operator=NameOperator | ('=' | no?='<>')) name=StringProperty (',' Language=Language)?;
	public NameOperationElements getNameOperationAccess() {
		return pNameOperation;
	}
	
	public ParserRule getNameOperationRule() {
		return getNameOperationAccess().getRule();
	}
	
	//NameType:
	//	'name'
	//	'type' ('=' | no?='<>') type=NameCheck;
	public NameTypeElements getNameTypeAccess() {
		return pNameType;
	}
	
	public ParserRule getNameTypeRule() {
		return getNameTypeAccess().getRule();
	}
	
	//JavaDoc:
	//	{JavaDoc} no?='no'?
	//	'JavaDoc'
	//	author?='@author'?
	//	parameter?='@parameter'?
	//	return?='@return'?
	//	version?='@version'?
	//	throws?='@throws'?
	//	see?='@see'?;
	public JavaDocElements getJavaDocAccess() {
		return pJavaDoc;
	}
	
	public ParserRule getJavaDocRule() {
		return getJavaDocAccess().getRule();
	}
	
	//Contains:
	//	{Contains} ((no?='do' 'not' | no?='don\'t' | no?='does' 'not' | no?='doesn\'t')? 'have' | no?='haven\'t') '{'
	//	rule=Rule '}';
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//Modifiers:
	//	('is' | 'are') no?='not'?
	//	'modified' 'with' '[' blend+=BlendModifiers ('or' blend+=BlendModifiers)* ']';
	public ModifiersElements getModifiersAccess() {
		return pModifiers;
	}
	
	public ParserRule getModifiersRule() {
		return getModifiersAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//RangoNames:
	//	{RangoNames} ('[' min=EInt '..' (max=EInt | '*') ']')? ('types' '{' types+=StringProperty (","
	//	types+=StringProperty)* '}')?;
	public RangoNamesElements getRangoNamesAccess() {
		return pRangoNames;
	}
	
	public ParserRule getRangoNamesRule() {
		return getRangoNamesAccess().getRule();
	}
	
	//StringProperty:
	//	StringValue | StringVariable;
	public StringPropertyElements getStringPropertyAccess() {
		return pStringProperty;
	}
	
	public ParserRule getStringPropertyRule() {
		return getStringPropertyAccess().getRule();
	}
	
	//StringValue:
	//	value=EString;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//StringVariable:
	//	variable=VariableSubtype '.' strings=ElementString;
	public StringVariableElements getStringVariableAccess() {
		return pStringVariable;
	}
	
	public ParserRule getStringVariableRule() {
		return getStringVariableAccess().getRule();
	}
	
	//VariableSubtype:
	//	variable=[Variable|EString] ('.' subtype=Element)?;
	public VariableSubtypeElements getVariableSubtypeAccess() {
		return pVariableSubtype;
	}
	
	public ParserRule getVariableSubtypeRule() {
		return getVariableSubtypeAccess().getRule();
	}
	
	//TypeProperty:
	//	StringProperty | isPrimitiveFunction | IsCollectionType | TypePrimitive;
	public TypePropertyElements getTypePropertyAccess() {
		return pTypeProperty;
	}
	
	public ParserRule getTypePropertyRule() {
		return getTypePropertyAccess().getRule();
	}
	
	//TypePrimitive:
	//	'Primitive.' typePrimitive=Primitive;
	public TypePrimitiveElements getTypePrimitiveAccess() {
		return pTypePrimitive;
	}
	
	public ParserRule getTypePrimitiveRule() {
		return getTypePrimitiveAccess().getRule();
	}
	
	//isPrimitiveFunction IsPrimitiveFuntion:
	//	{IsPrimitiveFuntion}
	//	'isPrimitive' '()'
	public IsPrimitiveFunctionElements getIsPrimitiveFunctionAccess() {
		return pIsPrimitiveFunction;
	}
	
	public ParserRule getIsPrimitiveFunctionRule() {
		return getIsPrimitiveFunctionAccess().getRule();
	}
	
	//enum Primitive:
	//	BOOLEAN='boolean' | BYTE='byte' | CHAR='char' | DOUBLE='double' | FLOAT='float'
	//	| INT='int' | LONG='long' | SHORT='short' | STRING='String';
	public PrimitiveElements getPrimitiveAccess() {
		return ePrimitive;
	}
	
	public EnumRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//IsCollectionType:
	//	{IsCollectionType}
	//	'isCollection' ('()' | '(' of=TypeProperty ')');
	public IsCollectionTypeElements getIsCollectionTypeAccess() {
		return pIsCollectionType;
	}
	
	public ParserRule getIsCollectionTypeRule() {
		return getIsCollectionTypeAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum NameOperator:
	//	START='start ' | END='end' | CONTAIN='contain' | LIKE='like';
	public NameOperatorElements getNameOperatorAccess() {
		return eNameOperator;
	}
	
	public EnumRule getNameOperatorRule() {
		return getNameOperatorAccess().getRule();
	}
	
	//enum ElementString:
	//	name | type;
	public ElementStringElements getElementStringAccess() {
		return eElementString;
	}
	
	public EnumRule getElementStringRule() {
		return getElementStringAccess().getRule();
	}
	
	//enum Language:
	//	SPANISH='Spanish' | ENGLISH='English';
	public LanguageElements getLanguageAccess() {
		return eLanguage;
	}
	
	public EnumRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//enum NameCheck:
	//	UPPER_CASE='upper case' | LOWER_CASE='lower case' | UPPER_CAMEL_CASE='upper camel case' |
	//	LOWER_CAMEL_CASE='lower camel case' | START_UPPER_CASE='start upper case';
	public NameCheckElements getNameCheckAccess() {
		return eNameCheck;
	}
	
	public EnumRule getNameCheckRule() {
		return getNameCheckAccess().getRule();
	}
	
	//BlendModifiers:
	//	access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
	//	default?='default')? ('and' synchronized?='synchronized')? | static?='static' ('and' final?='final')? ('and'
	//	abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')? | final?='final' ('and'
	//	abstract?='abstract')? ('and' default?='default')? ('and' synchronized?='synchronized')? | abstract?='abstract'
	//	('and' default?='default')? ('and' synchronized?='synchronized')? | default?='default' ('and'
	//	synchronized?='synchronized')? | synchronized?='synchronized';
	public BlendModifiersElements getBlendModifiersAccess() {
		return pBlendModifiers;
	}
	
	public ParserRule getBlendModifiersRule() {
		return getBlendModifiersAccess().getRule();
	}
	
	//enum AccessModifier:
	//	public | protected | private;
	public AccessModifierElements getAccessModifierAccess() {
		return eAccessModifier;
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum Quantifier:
	//	one | exists | all;
	public QuantifierElements getQuantifierAccess() {
		return eQuantifier;
	}
	
	public EnumRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
