// automatically generated by Xtext
grammar es.uam.sara.tfg.dsl.JRules with org.eclipse.xtext.common.Terminals

import "platform:/resource/es.uam.sara.tfg.metaModel/model/metamodel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RuleSet returns RuleSet:
		'Projects' 'Name:' ((ProjectName+=EString ( "," ProjectName+=EString)* )|'*')
		 sentences+=Sentence (sentences+=Sentence)* ;

Sentence returns Sentence:
	(Variable | Rule)';';

enum Element returns Element:
				Package = 'Package' | Class = 'Class' | Interface = 'Interface' | Enumeration = 'Enumeration' | Method = 'Method' | Attribute = 'Attribute' | File = 'File';

Variable returns Variable:
	name=EString':'
	element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString](',' in+=[Variable|EString])*)? ('using' using+=VariableSubtype(',' using+=VariableSubtype)*)?('satisfy' satisfy=Or)?;


Rule returns Rule:
	(no?='no')? quantifier=Quantifier element=Element ('from' from=[Variable|EString])? ('in' in+=[Variable|EString](',' in+=[Variable|EString])*)?('using' using+=VariableSubtype(',' using+=VariableSubtype)*)? ('which' filter=Or)? ('satisfy' satisfy=Or)?;

Or returns Or:
	 op+=And ( 'or' op+=And)*;

And returns And:
	op+=PrimaryOp ( 'and' op+=PrimaryOp)*;
	
PrimaryOp returns PrimaryOp:
	'('Or')'|PropertyLiteral;

PropertyLiteral returns PropertyLiteral:
	property=Property 
;

Property returns Property:
	IsImplemented | IsSuperInterface | IsSuperClass | IsSubClass | Implements | Extends | Tamanio | Parameter | Constructor | 
	Return | AttributeType | Initialize | Empty | IsGeneric | NameOperation | NameType| Contains | JavaDoc | Modifiers ;
	
	
IsImplemented returns IsImplemented:

	('is' | 'are')(no?= 'not')? 'implemented' valores=RangoNames;

IsSuperInterface returns IsSuperInterface:
	('is' | 'are')(no?= 'not')? 'superinterface' valores=RangoNames;

IsSuperClass returns IsSuperClass:
	('is' | 'are')(no?= 'not')?'superclass' valores=RangoNames;

IsSubClass returns IsSubClass:
	{IsSubClass}
	('is' | 'are')(no?= 'not')? 'subclass' ('of' of=StringProperty)?;

Implements returns Implements:
	(no?='do' 'not'|no?='don\'t'|no?='does' 'not'|no?='doesn\'t')? 'implements' valores=RangoNames;

Extends returns Extends:
	(no?='do' 'not'|no?='don\'t'|no?='does' 'not'|no?='doesn\'t')? 'extends' valores=RangoNames;

Tamanio returns Tamanio:
	'size' ((('='|no?='<>') exact=EInt) |('[' min=EInt'..'(max=EInt|'*')']'));

Parameter returns Parameter:
	{Parameter}
	'parameters' ('size'(('='|no?='<>') exact=EInt)|('['min=EInt'..'(max=EInt|'*')']'))? ('types''=' '['types+=TypeProperty(','types+=TypeProperty)*']')?;



Constructor returns Constructor:
	{Constructor}
	('is' | 'are')(no?= 'not')?'constructor'
	;

Return returns Return:
	'return' 'type' ('='|no?='<>') type=TypeProperty;

AttributeType returns AttributeType:
	'type'('='|no?='<>') type=TypeProperty;

Initialize returns Initialize:
	{Initialize}
('is' | 'are')(no?= 'not')?'initialize'
	;

Empty returns Empty:
	{Empty}
	('is' | 'are')(no?= 'not')?'empty'
	;

IsGeneric returns IsGeneric:
	{IsGeneric}
	('is' | 'are')(no?= 'not')?'generic'
	;

NameOperation returns NameOperation:
	'name' (((no?='does' 'not')? operator=NameOperator)|('='|no?='<>')) name=StringProperty(',' Language=Language)?;

NameType returns NameType:
	'name'
		'type' ('='|no?='<>') type=NameCheck;

JavaDoc returns JavaDoc:
{JavaDoc}
	(no?='no')?
	'JavaDoc'
	(author?='@author')?
	(parameter?='@parameter')?
	(return?='@return')?
	(version?='@version')?
	(throws?='@throws')?
	(see?='@see')?;

Contains returns Contains:
	{Contains}
	(((no?='do' 'not'|no?='don\'t'|no?='does' 'not'|no?='doesn\'t')? 'have')|(no?='haven\'t')) '{'rule=Rule'}';

Modifiers returns Modifiers:
	('is' | 'are')(no?= 'not')?
	'modified' 'with' '[' blend+=BlendModifiers ( 'or' blend+=BlendModifiers)* ']';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

RangoNames returns RangoNames:
	{RangoNames}
		('[' min=EInt '..'(max=EInt|'*')']')?
		('types' '{' types+=StringProperty ( "," types+=StringProperty)* '}' )?;

StringProperty returns StringProperty:  
	StringValue | StringVariable
;

StringValue returns StringValue:
	value=EString; 
	
StringVariable returns StringVariable:
	variable=VariableSubtype'.'strings=ElementString;

VariableSubtype returns VariableSubtype: 
	variable=[Variable|EString]('.'subtype=Element)?
;

TypeProperty returns TypeProperty:
	StringProperty | isPrimitiveFunction | IsCollectionType |TypePrimitive
;

TypePrimitive returns TypePrimitive:
	('Primitive.' typePrimitive=Primitive)
;
isPrimitiveFunction returns IsPrimitiveFuntion:
	{IsPrimitiveFuntion}
	'isPrimitive''()'
;
enum Primitive returns Primitive: 
BOOLEAN='boolean' | BYTE='byte' | CHAR='char' | DOUBLE='double' |FLOAT='float'
|INT= 'int' |LONG='long'|SHORT='short' | STRING='String'
;

IsCollectionType returns IsCollectionType:
	{IsCollectionType}
	'isCollection'('()'| '('of=TypeProperty')')
;



EInt returns ecore::EInt:
	'-'? INT;

enum NameOperator returns NameOperator:
			START = 'start ' | END = 'end' | CONTAIN = 'contain' | LIKE = 'like';
enum ElementString returns ElementString:
			name = 'name' | type = 'type';

enum Language returns Language:
				SPANISH = 'Spanish' | ENGLISH = 'English';

enum NameCheck returns NameCheck:
			UPPER_CASE = 'upper case' | LOWER_CASE = 'lower case' | UPPER_CAMEL_CASE = 'upper camel case' | LOWER_CAMEL_CASE = 'lower camel case' | START_UPPER_CASE = 'start upper case';

BlendModifiers returns BlendModifiers:
(access=AccessModifier ('and'static?='static')? ('and'final?='final')? ('and'abstract?='abstract')? ('and'default?='default')? ('and'synchronized?='synchronized')?) | 
	(static?='static' ('and'final?='final')? ('and'abstract?='abstract')? ('and'default?='default')? ('and'synchronized?='synchronized')?)|
	(final?='final' ('and'abstract?='abstract')? ('and'default?='default')? ('and'synchronized?='synchronized')?)|
	(abstract?='abstract' ('and'default?='default')? ('and' synchronized?='synchronized')?)| (default?='default' ('and' synchronized?='synchronized')?) |synchronized?='synchronized';

enum AccessModifier returns AccessModifier:
			public = 'public' | protected = 'protected' | private = 'private';

enum Quantifier returns Quantifier:
				one = 'one' | exists = 'exists' | all = 'all';
				
EString returns ecore::EString:
	STRING | ID;

